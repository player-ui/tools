import { usePluginState } from "@player-tools/devtools-desktop-plugins-common";
import type {
  DevtoolsPluginInteractionEvent,
  PlayerInitEvent,
  PluginData,
  Transaction,
} from "@player-tools/devtools-types";
import type { Flow } from "@player-ui/react";
import { dequal } from "dequal";
import { dset } from "dset/merge";
import { produce } from "immer";
import React, { useCallback, useEffect } from "react";
import { BASE_PLUGIN_DATA, INTERACTIONS } from "./constants";
import { genDataChangeTransaction } from "./helpers";
import flow from "../_generated/index.json";

// The index.ts and this file are the heart of your plugin. On the index.ts we have the Plugin taping
// into the inspected Player hooks and passing that to the WrapperComponent here, which should hold the logic for your plugin.

// TODO: Define your plugin loigic here

export interface WrapperComponentProps {
  /** component's children */
  readonly children: React.ReactNode;
  /** Inspected player logs */
  logs: {
    /** Log severity */
    severity: string;
    /** Log message */
    message: string;
  }[];
}

const SHOW_HIGHLIGHT_FOR = 1000;

const pluginData: PluginData = {
  ...BASE_PLUGIN_DATA,
  flow: flow as Flow,
};

// check if the input is a valid hex color
const isHexColor = (hex: string): boolean =>
  /^#[0-9A-F]{6}$/i.test(hex) || /^#[0-9A-F]{3}$/i.test(hex);

/** Defines the content to be rendered into the extension Player UI and process changes */
export const WrapperComponent = ({
  children,
  logs,
}: WrapperComponentProps): JSX.Element => {
  const [color, setColor] = React.useState<string>("#8f61b8");
  const ref = React.useRef<HTMLDivElement>(null);
  const [state, playerID, dispatch] = usePluginState();
  const lastProcessedInteraction = React.useRef(0);
  const id = pluginData.id;

  const highlightElement = useCallback(() => {
    if (!ref.current) {
      console.log("Ref is not attached to any element");
      return;
    }
    console.log(`Changing color to ${color}`);
    ref.current.style.backgroundColor = color;
    setTimeout(() => {
      if (!ref.current) return;
      ref.current.style.backgroundColor = "";
    }, SHOW_HIGHLIGHT_FOR);
  }, [color]);

  const processInteraction = useCallback(
    (interaction: DevtoolsPluginInteractionEvent) => {
      const {
        payload: { type, payload },
      } = interaction;
      console.log(`Processing interaction ${type}-${payload}`);

      if (type === INTERACTIONS.PERFORM_ACTION_WITH_PAYLOAD && payload) {
        if (isHexColor(payload)) {
          console.log(`Processing interaction with color ${payload}`);
          setColor(payload);
          highlightElement();
        }

        lastProcessedInteraction.current += 1;
      }
    },
    [],
  );

  // Initial plugin contentA
  useEffect(() => {
    const transaction: Transaction<PlayerInitEvent> = {
      id: -1,
      type: "PLAYER_DEVTOOLS_PLAYER_INIT",
      payload: {
        plugins: {
          [id]: pluginData,
        },
      },
      sender: playerID,
      context: "player",
      target: "player",
      timestamp: Date.now(),
      _messenger_: true,
    };

    dispatch(transaction);
  }, []);

  // Process interactions
  useEffect(() => {
    if (lastProcessedInteraction.current < (state.interactions.length ?? 0)) {
      state.interactions
        .slice(lastProcessedInteraction.current)
        .forEach(processInteraction);
    }
  }, [state.interactions.length]);

  // Logs changes
  useEffect(() => {
    if (dequal(state.plugins[id]?.flow?.data?.logs, logs)) return;

    const newState = produce(state, (draft) => {
      dset(draft, ["plugins", id, "flow", "data", "logs"], logs);
    });

    const transaction = genDataChangeTransaction({
      playerID,
      data: newState.plugins[id].flow.data,
      pluginID: id,
    });

    dispatch(transaction);
  }, [logs]);

  return <div ref={ref}>{children}</div>;
};
