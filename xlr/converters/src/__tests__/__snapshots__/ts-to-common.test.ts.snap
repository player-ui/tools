// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Complex Types Omit 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "foo",
    "properties": Object {
      "bax": Object {
        "node": Object {
          "title": "foo.bax",
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Bar",
    "type": "object",
  },
]
`;

exports[`Complex Types Omit with type intersection 1`] = `
Array [
  Object {
    "and": Array [
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "foo",
        "properties": Object {
          "fax": Object {
            "node": Object {
              "title": "foo.fax",
              "type": "number",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "foo",
        "type": "object",
      },
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "boo",
        "properties": Object {
          "bax": Object {
            "node": Object {
              "title": "boo.bax",
              "type": "boolean",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "boo",
        "type": "object",
      },
    ],
    "genericTokens": undefined,
    "name": "test",
    "source": "filename.ts",
    "title": "Bar",
    "type": "and",
  },
]
`;

exports[`Complex Types Omit with type union 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "test",
    "or": Array [
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "foo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "foo.far",
              "type": "string",
            },
            "required": true,
          },
          "fax": Object {
            "node": Object {
              "title": "foo.fax",
              "type": "number",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "foo",
        "type": "object",
      },
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "boo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "boo.far",
              "type": "string",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "boo",
        "type": "object",
      },
    ],
    "source": "filename.ts",
    "title": "Bar",
    "type": "or",
  },
]
`;

exports[`Complex Types Pick 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "foo.bar",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Bar",
    "type": "object",
  },
]
`;

exports[`Complex Types Pick with interface intersection 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "test",
    "or": Array [
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "foo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "foo.far",
              "type": "string",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "foo",
        "type": "object",
      },
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "boo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "boo.far",
              "type": "string",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "boo",
        "type": "object",
      },
    ],
    "source": "filename.ts",
    "title": "Bar",
    "type": "or",
  },
]
`;

exports[`Complex Types Pick with interface union 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "test",
    "or": Array [
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "foo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "foo.far",
              "type": "string",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "foo",
        "type": "object",
      },
      Object {
        "additionalProperties": false,
        "genericTokens": undefined,
        "name": "boo",
        "properties": Object {
          "far": Object {
            "node": Object {
              "title": "boo.far",
              "type": "number",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "boo",
        "type": "object",
      },
    ],
    "source": "filename.ts",
    "title": "Bar",
    "type": "or",
  },
]
`;

exports[`Edge Cases Modifying Cache References 1`] = `
Array [
  Object {
    "and": Array [
      Object {
        "and": Array [
          Object {
            "genericTokens": undefined,
            "name": "types",
            "or": Array [
              Object {
                "additionalProperties": false,
                "genericTokens": undefined,
                "name": "foo",
                "properties": Object {
                  "foo": Object {
                    "node": Object {
                      "title": "foo.foo",
                      "type": "string",
                    },
                    "required": true,
                  },
                },
                "source": "filename.ts",
                "title": "foo",
                "type": "object",
              },
              Object {
                "additionalProperties": false,
                "genericTokens": undefined,
                "name": "bar",
                "properties": Object {
                  "bar": Object {
                    "node": Object {
                      "title": "bar.bar",
                      "type": "number",
                    },
                    "required": true,
                  },
                },
                "source": "filename.ts",
                "title": "bar",
                "type": "object",
              },
            ],
            "source": "filename.ts",
            "title": "types",
            "type": "or",
          },
          Object {
            "additionalProperties": false,
            "properties": Object {
              "baz": Object {
                "node": Object {
                  "title": "baz",
                  "type": "number",
                },
                "required": true,
              },
            },
            "type": "object",
          },
        ],
        "genericTokens": undefined,
        "name": "requiredTypes",
        "source": "filename.ts",
        "title": "requiredTypes",
        "type": "and",
      },
      Object {
        "additionalProperties": false,
        "properties": Object {
          "baz": Object {
            "node": Object {
              "title": "baz",
              "type": "number",
            },
            "required": false,
          },
        },
        "type": "object",
      },
    ],
    "genericTokens": undefined,
    "name": "test",
    "source": "filename.ts",
    "title": "test",
    "type": "and",
  },
]
`;

exports[`Generic Declarations Basic Generic Type 1`] = `
Array [
  Object {
    "genericTokens": Array [
      Object {
        "constraints": Object {
          "type": "any",
        },
        "default": Object {
          "type": "any",
        },
        "symbol": "T",
      },
    ],
    "name": "Foo",
    "or": Array [
      Object {
        "title": "Foo",
        "type": "string",
      },
      Object {
        "ref": "T",
        "title": "Foo",
        "type": "ref",
      },
    ],
    "source": "filename.ts",
    "title": "Foo",
    "type": "or",
  },
]
`;

exports[`Generic Declarations Generic with Constraints 1`] = `
Array [
  Object {
    "genericTokens": Array [
      Object {
        "constraints": Object {
          "type": "string",
        },
        "default": Object {
          "type": "string",
        },
        "symbol": "T",
      },
    ],
    "name": "Foo",
    "or": Array [
      Object {
        "title": "Foo",
        "type": "number",
      },
      Object {
        "ref": "T",
        "title": "Foo",
        "type": "ref",
      },
    ],
    "source": "filename.ts",
    "title": "Foo",
    "type": "or",
  },
]
`;

exports[`Generic Declarations Implementing Generic Type 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "Bar",
    "or": Array [
      Object {
        "title": "Bar",
        "type": "boolean",
      },
      Object {
        "genericTokens": Array [
          Object {
            "constraints": Object {
              "type": "any",
            },
            "default": Object {
              "type": "any",
            },
            "symbol": "T",
          },
        ],
        "name": "Foo",
        "or": Array [
          Object {
            "title": "Foo",
            "type": "string",
          },
          Object {
            "title": "Foo",
            "type": "number",
          },
        ],
        "source": "filename.ts",
        "title": "Foo",
        "type": "or",
      },
    ],
    "source": "filename.ts",
    "title": "Bar",
    "type": "or",
  },
]
`;

exports[`Generic Declarations Implementing Interface with Generics 1`] = `Array []`;

exports[`Generic Declarations Implementing an generic wrapped interface 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Test",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "base.bar",
          "type": "string",
        },
        "required": true,
      },
      "test": Object {
        "node": Object {
          "title": "Test.test",
          "type": "any",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Test",
    "type": "object",
  },
]
`;

exports[`Generic Declarations Interface with Generics 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": Array [
      Object {
        "constraints": Object {
          "type": "any",
        },
        "default": Object {
          "type": "any",
        },
        "symbol": "T",
      },
    ],
    "name": "Foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "ref": "T",
          "title": "Foo.bar",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Foo",
    "type": "object",
  },
]
`;

exports[`Generic Declarations Interface with Generics and Constraints 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": Array [
      Object {
        "constraints": Object {
          "type": "string",
        },
        "default": Object {
          "type": "string",
        },
        "symbol": "T",
      },
    ],
    "name": "Foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "ref": "T",
          "title": "Foo.bar",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Foo",
    "type": "object",
  },
]
`;

exports[`Index Types Basic 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "test",
    "properties": Object {
      "key": Object {
        "node": Object {
          "title": "test.key",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "test",
    "type": "object",
  },
]
`;

exports[`Index Types Complex Types 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "test",
    "properties": Object {
      "key": Object {
        "node": Object {
          "additionalProperties": false,
          "genericTokens": undefined,
          "name": "something",
          "properties": Object {
            "prop1": Object {
              "node": Object {
                "title": "something.prop1",
                "type": "string",
              },
              "required": true,
            },
            "prop2": Object {
              "node": Object {
                "title": "something.prop2",
                "type": "number",
              },
              "required": true,
            },
          },
          "source": "filename.ts",
          "title": "test.key",
          "type": "object",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "test",
    "type": "object",
  },
]
`;

exports[`Interface Exports Basic Interface Type 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "Foo.bar",
          "type": "string",
        },
        "required": true,
      },
      "bax": Object {
        "node": Object {
          "title": "Foo.bax",
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Foo",
    "type": "object",
  },
]
`;

exports[`Interface Exports Implementing more than one Interfaces 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Test",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "Bar.bar",
          "type": "string",
        },
        "required": true,
      },
      "foo": Object {
        "node": Object {
          "title": "Foo.foo",
          "type": "number",
        },
        "required": true,
      },
      "test": Object {
        "node": Object {
          "title": "Test.test",
          "type": "any",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Test",
    "type": "object",
  },
]
`;

exports[`Interface Exports Interface with Inheritance 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "Foo.bar",
          "type": "string",
        },
        "required": true,
      },
      "baw": Object {
        "node": Object {
          "title": "Base.baw",
          "type": "any",
        },
        "required": true,
      },
      "bax": Object {
        "node": Object {
          "title": "Foo.bax",
          "type": "number",
        },
        "required": false,
      },
    },
    "source": "filename.ts",
    "title": "Foo",
    "type": "object",
  },
]
`;

exports[`Interface Exports Interface with Optional parameters 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "title": "Foo.bar",
          "type": "string",
        },
        "required": true,
      },
      "bax": Object {
        "node": Object {
          "title": "Foo.bax",
          "type": "number",
        },
        "required": false,
      },
    },
    "source": "filename.ts",
    "title": "Foo",
    "type": "object",
  },
]
`;

exports[`String Templates Basic 1`] = `
Array [
  Object {
    "format": "String is a .*, number is a [0-9]* and boolean is a true|false",
    "genericTokens": undefined,
    "name": "Bar",
    "source": "filename.ts",
    "title": "Bar",
    "type": "template",
  },
]
`;

exports[`String Templates Type References 1`] = `
Array [
  Object {
    "format": "String is a .*, number is a [0-9]* and boolean is a true|false",
    "genericTokens": undefined,
    "name": "Bar",
    "source": "filename.ts",
    "title": "Bar",
    "type": "template",
  },
]
`;

exports[`Type Exports Basic Array Type 1`] = `
Array [
  Object {
    "elementType": Object {
      "type": "string",
    },
    "genericTokens": undefined,
    "name": "Foo",
    "source": "filename.ts",
    "title": "Foo",
    "type": "array",
  },
]
`;

exports[`Type Exports Basic Union Type 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "Foo",
    "or": Array [
      Object {
        "title": "Foo",
        "type": "number",
      },
      Object {
        "title": "Foo",
        "type": "string",
      },
    ],
    "source": "filename.ts",
    "title": "Foo",
    "type": "or",
  },
]
`;

exports[`Type with typeof Indexing (long) 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "options",
    "or": Array [
      Object {
        "const": 1,
        "type": "number",
      },
      Object {
        "const": 2,
        "type": "number",
      },
      Object {
        "const": 3,
        "type": "number",
      },
      Object {
        "const": 4,
        "type": "number",
      },
      Object {
        "const": 5,
        "type": "number",
      },
      Object {
        "const": 6,
        "type": "number",
      },
      Object {
        "const": 7,
        "type": "number",
      },
      Object {
        "const": 8,
        "type": "number",
      },
      Object {
        "const": 9,
        "type": "number",
      },
      Object {
        "const": 10,
        "type": "number",
      },
      Object {
        "const": 11,
        "type": "number",
      },
      Object {
        "const": 12,
        "type": "number",
      },
      Object {
        "const": 13,
        "type": "number",
      },
      Object {
        "const": 14,
        "type": "number",
      },
      Object {
        "const": 15,
        "type": "number",
      },
      Object {
        "const": 16,
        "type": "number",
      },
      Object {
        "const": 17,
        "type": "number",
      },
      Object {
        "const": 18,
        "type": "number",
      },
      Object {
        "const": 19,
        "type": "number",
      },
      Object {
        "const": 20,
        "type": "number",
      },
      Object {
        "const": 21,
        "type": "number",
      },
      Object {
        "const": 22,
        "type": "number",
      },
      Object {
        "const": 23,
        "type": "number",
      },
      Object {
        "const": 24,
        "type": "number",
      },
      Object {
        "const": 25,
        "type": "number",
      },
      Object {
        "const": 26,
        "type": "number",
      },
      Object {
        "const": 27,
        "type": "number",
      },
      Object {
        "const": 28,
        "type": "number",
      },
      Object {
        "const": 29,
        "type": "number",
      },
      Object {
        "const": 30,
        "type": "number",
      },
      Object {
        "const": 31,
        "type": "number",
      },
      Object {
        "const": 32,
        "type": "number",
      },
      Object {
        "const": 33,
        "type": "number",
      },
      Object {
        "const": 34,
        "type": "number",
      },
      Object {
        "const": 35,
        "type": "number",
      },
      Object {
        "const": 36,
        "type": "number",
      },
      Object {
        "const": 37,
        "type": "number",
      },
      Object {
        "const": 38,
        "type": "number",
      },
      Object {
        "const": 39,
        "type": "number",
      },
      Object {
        "const": 40,
        "type": "number",
      },
      Object {
        "const": 41,
        "type": "number",
      },
      Object {
        "const": 42,
        "type": "number",
      },
      Object {
        "const": 43,
        "type": "number",
      },
      Object {
        "const": 44,
        "type": "number",
      },
      Object {
        "const": 45,
        "type": "number",
      },
      Object {
        "const": 46,
        "type": "number",
      },
      Object {
        "const": 47,
        "type": "number",
      },
      Object {
        "const": 48,
        "type": "number",
      },
      Object {
        "const": 49,
        "type": "number",
      },
      Object {
        "const": 50,
        "type": "number",
      },
      Object {
        "const": 51,
        "type": "number",
      },
      Object {
        "const": 52,
        "type": "number",
      },
      Object {
        "const": 53,
        "type": "number",
      },
      Object {
        "const": 54,
        "type": "number",
      },
      Object {
        "const": 55,
        "type": "number",
      },
      Object {
        "const": 56,
        "type": "number",
      },
      Object {
        "const": 57,
        "type": "number",
      },
      Object {
        "const": 58,
        "type": "number",
      },
    ],
    "source": "filename.ts",
    "title": "options",
    "type": "or",
  },
]
`;

exports[`Type with typeof Indexing 1`] = `
Array [
  Object {
    "genericTokens": undefined,
    "name": "options",
    "or": Array [
      Object {
        "const": "one",
        "type": "string",
      },
      Object {
        "const": "two",
        "type": "string",
      },
      Object {
        "const": "three",
        "type": "string",
      },
    ],
    "source": "filename.ts",
    "title": "options",
    "type": "or",
  },
]
`;

exports[`Variable Exports Aliased Arrow function exports its own name 1`] = `
Array [
  Object {
    "name": "foo",
    "parameters": Array [
      Object {
        "default": undefined,
        "name": "input",
        "optional": undefined,
        "type": Object {
          "type": "number",
        },
      },
    ],
    "returnType": Object {
      "additionalProperties": false,
      "genericTokens": undefined,
      "name": "Bar",
      "properties": Object {
        "foo": Object {
          "node": Object {
            "title": "Bar.foo",
            "type": "string",
          },
          "required": true,
        },
        "fuz": Object {
          "node": Object {
            "title": "Bar.fuz",
            "type": "number",
          },
          "required": true,
        },
      },
      "source": "filename.ts",
      "title": "Bar",
      "type": "object",
    },
    "source": "filename.ts",
    "type": "function",
  },
  Object {
    "name": "baz",
    "parameters": Array [
      Object {
        "default": undefined,
        "name": "input",
        "optional": undefined,
        "type": Object {
          "type": "number",
        },
      },
    ],
    "returnType": Object {
      "additionalProperties": false,
      "genericTokens": undefined,
      "name": "Bar",
      "properties": Object {
        "foo": Object {
          "node": Object {
            "title": "Bar.foo",
            "type": "string",
          },
          "required": true,
        },
        "fuz": Object {
          "node": Object {
            "title": "Bar.fuz",
            "type": "number",
          },
          "required": true,
        },
      },
      "source": "filename.ts",
      "title": "Bar",
      "type": "object",
    },
    "source": "filename.ts",
    "type": "function",
  },
]
`;

exports[`Variable Exports Aliased variable 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Bar",
    "properties": Object {
      "foo": Object {
        "node": Object {
          "title": "Bar.foo",
          "type": "string",
        },
        "required": true,
      },
      "fuz": Object {
        "node": Object {
          "title": "Bar.fuz",
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Bar",
    "type": "object",
  },
]
`;

exports[`Variable Exports Array const exports 1`] = `
Array [
  Object {
    "const": Array [
      Object {
        "const": 1,
        "type": "number",
      },
      Object {
        "const": 2,
        "type": "number",
      },
      Object {
        "const": 3,
        "type": "number",
      },
    ],
    "elementType": Object {
      "type": "any",
    },
    "name": "foo",
    "source": "filename.ts",
    "type": "array",
  },
]
`;

exports[`Variable Exports Array const exports with spread 1`] = `
Array [
  Object {
    "const": Array [
      Object {
        "const": 1,
        "type": "number",
      },
      Object {
        "const": 2,
        "type": "number",
      },
      Object {
        "const": 3,
        "type": "number",
      },
      Object {
        "const": 4,
        "type": "number",
      },
    ],
    "elementType": Object {
      "type": "any",
    },
    "name": "bar",
    "source": "filename.ts",
    "type": "array",
  },
]
`;

exports[`Variable Exports Arrow function with object return type 1`] = `
Array [
  Object {
    "name": "foo",
    "parameters": Array [],
    "returnType": Object {
      "additionalProperties": false,
      "genericTokens": undefined,
      "name": "Bar",
      "properties": Object {
        "foo": Object {
          "node": Object {
            "title": "Bar.foo",
            "type": "string",
          },
          "required": true,
        },
        "fuz": Object {
          "node": Object {
            "title": "Bar.fuz",
            "type": "number",
          },
          "required": true,
        },
      },
      "source": "filename.ts",
      "title": "Bar",
      "type": "object",
    },
    "source": "filename.ts",
    "type": "function",
  },
]
`;

exports[`Variable Exports Arrow function with parameters 1`] = `
Array [
  Object {
    "name": "foo",
    "parameters": Array [
      Object {
        "default": undefined,
        "name": "input",
        "optional": undefined,
        "type": Object {
          "type": "number",
        },
      },
    ],
    "returnType": Object {
      "additionalProperties": false,
      "genericTokens": undefined,
      "name": "Bar",
      "properties": Object {
        "foo": Object {
          "node": Object {
            "title": "Bar.foo",
            "type": "string",
          },
          "required": true,
        },
        "fuz": Object {
          "node": Object {
            "title": "Bar.fuz",
            "type": "number",
          },
          "required": true,
        },
      },
      "source": "filename.ts",
      "title": "Bar",
      "type": "object",
    },
    "source": "filename.ts",
    "type": "function",
  },
]
`;

exports[`Variable Exports Function with object return type 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "Bar",
    "properties": Object {
      "foo": Object {
        "node": Object {
          "title": "Bar.foo",
          "type": "string",
        },
        "required": true,
      },
      "fuz": Object {
        "node": Object {
          "title": "Bar.fuz",
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Bar",
    "type": "object",
  },
]
`;

exports[`Variable Exports Function with primitive return type 1`] = `
Array [
  Object {
    "name": "foo",
    "source": "filename.ts",
    "type": "string",
  },
]
`;

exports[`Variable Exports Object const exports 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "name": "foo",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "const": "test",
          "type": "string",
        },
        "required": true,
      },
      "far": Object {
        "node": Object {
          "const": false,
          "type": "boolean",
        },
        "required": true,
      },
      "foo": Object {
        "node": Object {
          "const": 1,
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
]
`;

exports[`Variable Exports Object const exports with spread 1`] = `
Array [
  Object {
    "additionalProperties": false,
    "name": "far",
    "properties": Object {
      "bar": Object {
        "node": Object {
          "const": "test",
          "type": "string",
        },
        "required": true,
      },
      "far": Object {
        "node": Object {
          "const": false,
          "type": "boolean",
        },
        "required": true,
      },
      "foo": Object {
        "node": Object {
          "const": 1,
          "type": "number",
        },
        "required": true,
      },
      "mar": Object {
        "node": Object {
          "const": 2,
          "type": "number",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
]
`;

exports[`Variable Exports Primitive const exports 1`] = `
Array [
  Object {
    "const": 1,
    "name": "foo",
    "source": "filename.ts",
    "type": "number",
  },
  Object {
    "const": "test",
    "name": "bar",
    "source": "filename.ts",
    "type": "string",
  },
  Object {
    "const": true,
    "name": "far",
    "source": "filename.ts",
    "type": "boolean",
  },
]
`;
