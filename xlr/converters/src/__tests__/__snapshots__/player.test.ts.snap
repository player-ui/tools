// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Player Data Types Export 1`] = `
[
  {
    "additionalProperties": false,
    "name": "BooleanTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "BooleanType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "IntegerType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerPosTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "IntegerPosType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerNNTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "IntegerNNType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "StringTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "StringType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "CollectionTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "CollectionType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "DateTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "DateType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "PhoneTypeRef",
    "properties": {
      "type": {
        "node": {
          "const": "PhoneType",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "BooleanType",
    "properties": {
      "default": {
        "node": {
          "const": false,
          "type": "boolean",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "BooleanType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "node": {
                    "const": "Value must be true or false",
                    "type": "string",
                  },
                  "required": true,
                },
                "options": {
                  "node": {
                    "const": [
                      {
                        "const": true,
                        "type": "boolean",
                      },
                      {
                        "const": false,
                        "type": "boolean",
                      },
                    ],
                    "elementType": {
                      "type": "any",
                    },
                    "type": "array",
                  },
                  "required": true,
                },
                "type": {
                  "node": {
                    "const": "oneOf",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerType",
    "properties": {
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "integer",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "IntegerType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "integer",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerPosType",
    "properties": {
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "integer",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "IntegerPosType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "integer",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "min",
                    "type": "string",
                  },
                  "required": true,
                },
                "value": {
                  "node": {
                    "const": 1,
                    "type": "number",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "IntegerNNType",
    "properties": {
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "integer",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "IntegerNNType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "integer",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "min",
                    "type": "string",
                  },
                  "required": true,
                },
                "value": {
                  "node": {
                    "const": 0,
                    "type": "number",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "StringType",
    "properties": {
      "default": {
        "node": {
          "const": "",
          "type": "string",
        },
        "required": true,
      },
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "string",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "StringType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "string",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "CollectionType",
    "properties": {
      "type": {
        "node": {
          "const": "CollectionType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "collection",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "DateType",
    "properties": {
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "date",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "DateType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "string",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "name": "PhoneType",
    "properties": {
      "format": {
        "node": {
          "additionalProperties": false,
          "properties": {
            "type": {
              "node": {
                "const": "phone",
                "type": "string",
              },
              "required": true,
            },
          },
          "type": "object",
        },
        "required": true,
      },
      "type": {
        "node": {
          "const": "PhoneType",
          "type": "string",
        },
        "required": true,
      },
      "validation": {
        "node": {
          "const": [
            {
              "additionalProperties": false,
              "properties": {
                "type": {
                  "node": {
                    "const": "phone",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
          ],
          "elementType": {
            "type": "any",
          },
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "type": "object",
  },
]
`;

exports[`Player Expression Types Export 1`] = `
[
  {
    "genericArguments": [
      {
        "additionalItems": false,
        "elementTypes": [
          {
            "name": "str",
            "optional": undefined,
            "type": {
              "type": "unknown",
            },
          },
          {
            "name": "pattern",
            "optional": undefined,
            "type": {
              "type": "unknown",
            },
          },
          {
            "name": "replacement",
            "optional": true,
            "type": {
              "type": "unknown",
            },
          },
        ],
        "minItems": 2,
        "type": "tuple",
      },
      {
        "type": "unknown",
      },
    ],
    "name": "replace",
    "ref": "ExpressionHandler",
    "source": "filename.ts",
    "type": "ref",
  },
  {
    "genericArguments": [
      {
        "additionalItems": false,
        "elementTypes": [
          {
            "optional": false,
            "type": {
              "title": "0",
              "type": "unknown",
            },
          },
        ],
        "minItems": 1,
        "type": "tuple",
      },
      {
        "type": "boolean",
      },
    ],
    "name": "isEmpty",
    "ref": "ExpressionHandler<[unknown], boolean>",
    "source": "filename.ts",
    "type": "ref",
  },
  {
    "genericArguments": [
      {
        "elementType": {
          "or": [
            {
              "type": "string",
            },
            {
              "type": "number",
            },
          ],
          "type": "or",
        },
        "title": "[]",
        "type": "array",
      },
      {
        "type": "number",
      },
    ],
    "name": "sum",
    "ref": "ExpressionHandler",
    "source": "filename.ts",
    "type": "ref",
  },
]
`;

exports[`Player JSDoc @meta Export 1`] = `
[
  {
    "additionalProperties": {
      "type": "unknown",
    },
    "description": "An asset is the smallest unit of user interaction in a player view",
    "genericTokens": [
      {
        "constraints": {
          "type": "string",
        },
        "default": {
          "type": "string",
        },
        "symbol": "T",
      },
    ],
    "meta": {
      "category": "views",
      "screenshot": "/path/image.png",
    },
    "name": "Asset",
    "properties": {
      "id": {
        "node": {
          "description": "Each asset requires a unique id per view",
          "title": "Asset.id",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Asset",
    "type": "object",
  },
]
`;

exports[`Player Types Export 1`] = `
[
  {
    "additionalProperties": {
      "type": "unknown",
    },
    "description": "An asset is the smallest unit of user interaction in a player view",
    "genericTokens": [
      {
        "constraints": {
          "type": "string",
        },
        "default": {
          "type": "string",
        },
        "symbol": "T",
      },
    ],
    "name": "Asset",
    "properties": {
      "id": {
        "node": {
          "description": "Each asset requires a unique id per view",
          "title": "Asset.id",
          "type": "string",
        },
        "required": true,
      },
      "type": {
        "node": {
          "description": "The asset type determines the semantics of how a user interacts with a page",
          "ref": "T",
          "title": "Asset.type",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Asset",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "An asset that contains a Binding.",
    "extends": {
      "genericArguments": undefined,
      "ref": "Asset",
      "type": "ref",
    },
    "genericTokens": undefined,
    "name": "AssetBinding",
    "properties": {
      "binding": {
        "node": {
          "description": "A binding that points to somewhere in the data model",
          "genericArguments": undefined,
          "ref": "Binding",
          "title": "AssetBinding.binding",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "AssetBinding",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "A single case statement to use in a switch",
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "SwitchCase",
    "properties": {
      "asset": {
        "node": {
          "description": "The Asset to use if this case is applicable",
          "ref": "T",
          "title": "SwitchCase.asset",
          "type": "ref",
        },
        "required": true,
      },
      "case": {
        "node": {
          "description": "An expression to execute to determine if this case applies",
          "or": [
            {
              "genericArguments": undefined,
              "ref": "Expression",
              "title": "SwitchCase.case",
              "type": "ref",
            },
            {
              "const": true,
              "type": "boolean",
            },
          ],
          "title": "SwitchCase.case",
          "type": "or",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "SwitchCase",
    "type": "object",
  },
  {
    "description": "A switch can replace an asset with the applicable case on first render",
    "elementType": {
      "additionalProperties": false,
      "description": "A single case statement to use in a switch",
      "extends": undefined,
      "genericTokens": [
        {
          "constraints": {
            "ref": "Asset",
            "type": "ref",
          },
          "default": {
            "ref": "Asset",
            "type": "ref",
          },
          "symbol": "T",
        },
      ],
      "name": "SwitchCase",
      "properties": {
        "asset": {
          "node": {
            "description": "The Asset to use if this case is applicable",
            "ref": "T",
            "title": "SwitchCase.asset",
            "type": "ref",
          },
          "required": true,
        },
        "case": {
          "node": {
            "description": "An expression to execute to determine if this case applies",
            "or": [
              {
                "ref": "Expression",
                "title": "SwitchCase.case",
                "type": "ref",
              },
              {
                "const": true,
                "type": "boolean",
              },
            ],
            "title": "SwitchCase.case",
            "type": "or",
          },
          "required": true,
        },
      },
      "source": "filename.ts",
      "title": "SwitchCase",
      "type": "object",
    },
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "Switch",
    "source": "filename.ts",
    "title": "Switch",
    "type": "array",
  },
  {
    "additionalProperties": {
      "type": "unknown",
    },
    "description": "An object that contains an asset",
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "AssetWrapper",
    "properties": {
      "asset": {
        "node": {
          "description": "An asset instance",
          "ref": "T",
          "title": "AssetWrapper.asset",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "AssetWrapper",
    "type": "object",
  },
  {
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "AssetWrapperOrSwitch",
    "or": [
      {
        "and": [
          {
            "genericArguments": [
              {
                "ref": "T",
                "type": "ref",
              },
            ],
            "ref": "AssetWrapper<T>",
            "type": "ref",
          },
          {
            "additionalProperties": false,
            "properties": {
              "dynamicSwitch": {
                "node": {
                  "description": "The dynamicSwitch property can"t exist at the same time as "asset'",
                  "title": "dynamicSwitch",
                  "type": "never",
                },
                "required": false,
              },
              "staticSwitch": {
                "node": {
                  "description": "The staticSwitch property can"t exist at the same time as "asset'",
                  "title": "staticSwitch",
                  "type": "never",
                },
                "required": false,
              },
            },
            "type": "object",
          },
        ],
        "type": "and",
      },
      {
        "and": [
          {
            "additionalProperties": false,
            "extends": undefined,
            "genericTokens": [
              {
                "constraints": {
                  "genericArguments": undefined,
                  "ref": "Asset",
                  "type": "ref",
                },
                "default": {
                  "genericArguments": undefined,
                  "ref": "Asset",
                  "type": "ref",
                },
                "symbol": "T",
              },
            ],
            "name": "StaticSwitch",
            "properties": {
              "staticSwitch": {
                "node": {
                  "description": "A static switch only evaluates the applicable base on first render of the view",
                  "elementType": {
                    "additionalProperties": false,
                    "description": "A single case statement to use in a switch",
                    "extends": undefined,
                    "genericTokens": [
                      {
                        "constraints": {
                          "ref": "Asset",
                          "type": "ref",
                        },
                        "default": {
                          "ref": "Asset",
                          "type": "ref",
                        },
                        "symbol": "T",
                      },
                    ],
                    "name": "SwitchCase",
                    "properties": {
                      "asset": {
                        "node": {
                          "description": "The Asset to use if this case is applicable",
                          "ref": "T",
                          "title": "SwitchCase.asset",
                          "type": "ref",
                        },
                        "required": true,
                      },
                      "case": {
                        "node": {
                          "description": "An expression to execute to determine if this case applies",
                          "or": [
                            {
                              "ref": "Expression",
                              "title": "SwitchCase.case",
                              "type": "ref",
                            },
                            {
                              "const": true,
                              "type": "boolean",
                            },
                          ],
                          "title": "SwitchCase.case",
                          "type": "or",
                        },
                        "required": true,
                      },
                    },
                    "source": "filename.ts",
                    "title": "SwitchCase",
                    "type": "object",
                  },
                  "genericTokens": [
                    {
                      "constraints": {
                        "ref": "Asset",
                        "type": "ref",
                      },
                      "default": {
                        "ref": "Asset",
                        "type": "ref",
                      },
                      "symbol": "T",
                    },
                  ],
                  "name": "Switch",
                  "source": "filename.ts",
                  "title": "StaticSwitch.staticSwitch",
                  "type": "array",
                },
                "required": true,
              },
            },
            "source": "filename.ts",
            "title": "StaticSwitch",
            "type": "object",
          },
          {
            "additionalProperties": false,
            "properties": {
              "asset": {
                "node": {
                  "description": "The staticSwitch property can"t exist at the same time as "asset'",
                  "title": "asset",
                  "type": "never",
                },
                "required": false,
              },
              "dynamicSwitch": {
                "node": {
                  "description": "The staticSwitch property can"t exist at the same time as "dynamicSwitch'",
                  "title": "dynamicSwitch",
                  "type": "never",
                },
                "required": false,
              },
            },
            "type": "object",
          },
        ],
        "type": "and",
      },
      {
        "and": [
          {
            "additionalProperties": false,
            "extends": undefined,
            "genericTokens": [
              {
                "constraints": {
                  "genericArguments": undefined,
                  "ref": "Asset",
                  "type": "ref",
                },
                "default": {
                  "genericArguments": undefined,
                  "ref": "Asset",
                  "type": "ref",
                },
                "symbol": "T",
              },
            ],
            "name": "DynamicSwitch",
            "properties": {
              "dynamicSwitch": {
                "node": {
                  "description": "A dynamic switch re-evaluates the applicable case as data changes",
                  "elementType": {
                    "additionalProperties": false,
                    "description": "A single case statement to use in a switch",
                    "extends": undefined,
                    "genericTokens": [
                      {
                        "constraints": {
                          "ref": "Asset",
                          "type": "ref",
                        },
                        "default": {
                          "ref": "Asset",
                          "type": "ref",
                        },
                        "symbol": "T",
                      },
                    ],
                    "name": "SwitchCase",
                    "properties": {
                      "asset": {
                        "node": {
                          "description": "The Asset to use if this case is applicable",
                          "ref": "T",
                          "title": "SwitchCase.asset",
                          "type": "ref",
                        },
                        "required": true,
                      },
                      "case": {
                        "node": {
                          "description": "An expression to execute to determine if this case applies",
                          "or": [
                            {
                              "ref": "Expression",
                              "title": "SwitchCase.case",
                              "type": "ref",
                            },
                            {
                              "const": true,
                              "type": "boolean",
                            },
                          ],
                          "title": "SwitchCase.case",
                          "type": "or",
                        },
                        "required": true,
                      },
                    },
                    "source": "filename.ts",
                    "title": "SwitchCase",
                    "type": "object",
                  },
                  "genericTokens": [
                    {
                      "constraints": {
                        "ref": "Asset",
                        "type": "ref",
                      },
                      "default": {
                        "ref": "Asset",
                        "type": "ref",
                      },
                      "symbol": "T",
                    },
                  ],
                  "name": "Switch",
                  "source": "filename.ts",
                  "title": "DynamicSwitch.dynamicSwitch",
                  "type": "array",
                },
                "required": true,
              },
            },
            "source": "filename.ts",
            "title": "DynamicSwitch",
            "type": "object",
          },
          {
            "additionalProperties": false,
            "properties": {
              "asset": {
                "node": {
                  "description": "The dynamicSwitch property can"t exist at the same time as "asset'",
                  "title": "asset",
                  "type": "never",
                },
                "required": false,
              },
              "staticSwitch": {
                "node": {
                  "description": "The dynamicSwitch property can"t exist at the same time as "staticSwitch'",
                  "title": "staticSwitch",
                  "type": "never",
                },
                "required": false,
              },
            },
            "type": "object",
          },
        ],
        "type": "and",
      },
    ],
    "source": "filename.ts",
    "title": "AssetWrapperOrSwitch",
    "type": "or",
  },
  {
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "AssetSwitch",
    "or": [
      {
        "additionalProperties": false,
        "extends": undefined,
        "genericTokens": [
          {
            "constraints": {
              "ref": "Asset",
              "type": "ref",
            },
            "default": {
              "ref": "Asset",
              "type": "ref",
            },
            "symbol": "T",
          },
        ],
        "name": "StaticSwitch",
        "properties": {
          "staticSwitch": {
            "node": {
              "description": "A static switch only evaluates the applicable base on first render of the view",
              "elementType": {
                "additionalProperties": false,
                "description": "A single case statement to use in a switch",
                "extends": undefined,
                "genericTokens": [
                  {
                    "constraints": {
                      "ref": "Asset",
                      "type": "ref",
                    },
                    "default": {
                      "ref": "Asset",
                      "type": "ref",
                    },
                    "symbol": "T",
                  },
                ],
                "name": "SwitchCase",
                "properties": {
                  "asset": {
                    "node": {
                      "description": "The Asset to use if this case is applicable",
                      "ref": "T",
                      "title": "SwitchCase.asset",
                      "type": "ref",
                    },
                    "required": true,
                  },
                  "case": {
                    "node": {
                      "description": "An expression to execute to determine if this case applies",
                      "or": [
                        {
                          "ref": "Expression",
                          "title": "SwitchCase.case",
                          "type": "ref",
                        },
                        {
                          "const": true,
                          "type": "boolean",
                        },
                      ],
                      "title": "SwitchCase.case",
                      "type": "or",
                    },
                    "required": true,
                  },
                },
                "source": "filename.ts",
                "title": "SwitchCase",
                "type": "object",
              },
              "genericTokens": [
                {
                  "constraints": {
                    "ref": "Asset",
                    "type": "ref",
                  },
                  "default": {
                    "ref": "Asset",
                    "type": "ref",
                  },
                  "symbol": "T",
                },
              ],
              "name": "Switch",
              "source": "filename.ts",
              "title": "StaticSwitch.staticSwitch",
              "type": "array",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "StaticSwitch",
        "type": "object",
      },
      {
        "additionalProperties": false,
        "extends": undefined,
        "genericTokens": [
          {
            "constraints": {
              "ref": "Asset",
              "type": "ref",
            },
            "default": {
              "ref": "Asset",
              "type": "ref",
            },
            "symbol": "T",
          },
        ],
        "name": "DynamicSwitch",
        "properties": {
          "dynamicSwitch": {
            "node": {
              "description": "A dynamic switch re-evaluates the applicable case as data changes",
              "elementType": {
                "additionalProperties": false,
                "description": "A single case statement to use in a switch",
                "extends": undefined,
                "genericTokens": [
                  {
                    "constraints": {
                      "ref": "Asset",
                      "type": "ref",
                    },
                    "default": {
                      "ref": "Asset",
                      "type": "ref",
                    },
                    "symbol": "T",
                  },
                ],
                "name": "SwitchCase",
                "properties": {
                  "asset": {
                    "node": {
                      "description": "The Asset to use if this case is applicable",
                      "ref": "T",
                      "title": "SwitchCase.asset",
                      "type": "ref",
                    },
                    "required": true,
                  },
                  "case": {
                    "node": {
                      "description": "An expression to execute to determine if this case applies",
                      "or": [
                        {
                          "ref": "Expression",
                          "title": "SwitchCase.case",
                          "type": "ref",
                        },
                        {
                          "const": true,
                          "type": "boolean",
                        },
                      ],
                      "title": "SwitchCase.case",
                      "type": "or",
                    },
                    "required": true,
                  },
                },
                "source": "filename.ts",
                "title": "SwitchCase",
                "type": "object",
              },
              "genericTokens": [
                {
                  "constraints": {
                    "ref": "Asset",
                    "type": "ref",
                  },
                  "default": {
                    "ref": "Asset",
                    "type": "ref",
                  },
                  "symbol": "T",
                },
              ],
              "name": "Switch",
              "source": "filename.ts",
              "title": "DynamicSwitch.dynamicSwitch",
              "type": "array",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "DynamicSwitch",
        "type": "object",
      },
    ],
    "source": "filename.ts",
    "title": "AssetSwitch",
    "type": "or",
  },
  {
    "additionalProperties": false,
    "genericTokens": [
      {
        "constraints": {
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "StaticSwitch",
    "properties": {
      "staticSwitch": {
        "node": {
          "description": "A static switch only evaluates the applicable base on first render of the view",
          "elementType": {
            "additionalProperties": false,
            "description": "A single case statement to use in a switch",
            "genericTokens": [
              {
                "constraints": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "default": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "symbol": "T",
              },
            ],
            "name": "SwitchCase",
            "properties": {
              "asset": {
                "node": {
                  "description": "The Asset to use if this case is applicable",
                  "ref": "T",
                  "title": "SwitchCase.asset",
                  "type": "ref",
                },
                "required": true,
              },
              "case": {
                "node": {
                  "description": "An expression to execute to determine if this case applies",
                  "or": [
                    {
                      "ref": "Expression",
                      "title": "SwitchCase.case",
                      "type": "ref",
                    },
                    {
                      "const": true,
                      "type": "boolean",
                    },
                  ],
                  "title": "SwitchCase.case",
                  "type": "or",
                },
                "required": true,
              },
            },
            "source": "filename.ts",
            "title": "SwitchCase",
            "type": "object",
          },
          "genericTokens": [
            {
              "constraints": {
                "ref": "Asset",
                "type": "ref",
              },
              "default": {
                "ref": "Asset",
                "type": "ref",
              },
              "symbol": "T",
            },
          ],
          "name": "Switch",
          "source": "filename.ts",
          "title": "StaticSwitch.staticSwitch",
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "StaticSwitch",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "genericTokens": [
      {
        "constraints": {
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "DynamicSwitch",
    "properties": {
      "dynamicSwitch": {
        "node": {
          "description": "A dynamic switch re-evaluates the applicable case as data changes",
          "elementType": {
            "additionalProperties": false,
            "description": "A single case statement to use in a switch",
            "genericTokens": [
              {
                "constraints": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "default": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "symbol": "T",
              },
            ],
            "name": "SwitchCase",
            "properties": {
              "asset": {
                "node": {
                  "description": "The Asset to use if this case is applicable",
                  "ref": "T",
                  "title": "SwitchCase.asset",
                  "type": "ref",
                },
                "required": true,
              },
              "case": {
                "node": {
                  "description": "An expression to execute to determine if this case applies",
                  "or": [
                    {
                      "ref": "Expression",
                      "title": "SwitchCase.case",
                      "type": "ref",
                    },
                    {
                      "const": true,
                      "type": "boolean",
                    },
                  ],
                  "title": "SwitchCase.case",
                  "type": "or",
                },
                "required": true,
              },
            },
            "source": "filename.ts",
            "title": "SwitchCase",
            "type": "object",
          },
          "genericTokens": [
            {
              "constraints": {
                "ref": "Asset",
                "type": "ref",
              },
              "default": {
                "ref": "Asset",
                "type": "ref",
              },
              "symbol": "T",
            },
          ],
          "name": "Switch",
          "source": "filename.ts",
          "title": "DynamicSwitch.dynamicSwitch",
          "type": "array",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "DynamicSwitch",
    "type": "object",
  },
  {
    "description": "Expressions are a specialized way of executing code.
If the expression is a composite, the last expression executed is the return value",
    "genericTokens": undefined,
    "name": "Expression",
    "or": [
      {
        "title": "Expression",
        "type": "string",
      },
      {
        "elementType": {
          "title": "Expression.[]",
          "type": "string",
        },
        "title": "Expression.[]",
        "type": "array",
      },
    ],
    "source": "filename.ts",
    "title": "Expression",
    "type": "or",
  },
  {
    "format": "@[.*]@",
    "genericTokens": undefined,
    "name": "ExpressionRef",
    "source": "filename.ts",
    "title": "ExpressionRef",
    "type": "template",
  },
  {
    "description": "Bindings describe locations in the data model.",
    "genericTokens": undefined,
    "name": "Binding",
    "source": "filename.ts",
    "title": "Binding",
    "type": "string",
  },
  {
    "format": "{{.*}}",
    "genericTokens": undefined,
    "name": "BindingRef",
    "source": "filename.ts",
    "title": "BindingRef",
    "type": "template",
  },
  {
    "description": "The data-model is the location that all user data is stored",
    "genericTokens": undefined,
    "keyType": {
      "type": "any",
    },
    "name": "DataModel",
    "source": "filename.ts",
    "title": "DataModel",
    "type": "record",
    "valueType": {
      "type": "unknown",
    },
  },
  {
    "and": [
      {
        "additionalProperties": false,
        "properties": {
          "BEGIN": {
            "node": {
              "description": "The name of the Flow to begin on",
              "title": "BEGIN",
              "type": "string",
            },
            "required": true,
          },
        },
        "type": "object",
      },
      {
        "keyType": {
          "type": "string",
        },
        "type": "record",
        "valueType": {
          "or": [
            {
              "type": "string",
            },
            {
              "additionalProperties": {
                "or": [
                  {
                    "type": "undefined",
                  },
                  {
                    "type": "string",
                  },
                  {
                    "genericArguments": undefined,
                    "ref": "Expression",
                    "type": "ref",
                  },
                  {
                    "additionalProperties": false,
                    "description": "An object with an expression in it",
                    "genericTokens": undefined,
                    "name": "ExpressionObject",
                    "properties": {
                      "exp": {
                        "node": {
                          "description": "The expression to run",
                          "ref": "Expression",
                          "title": "ExpressionObject.exp",
                          "type": "ref",
                        },
                        "required": false,
                      },
                    },
                    "source": "filename.ts",
                    "title": "ExpressionObject",
                    "type": "object",
                  },
                  {
                    "genericTokens": undefined,
                    "name": "NavigationFlowState",
                    "or": [
                      {
                        "additionalProperties": false,
                        "description": "A state representing a view",
                        "genericTokens": undefined,
                        "name": "NavigationFlowViewState",
                        "properties": {
                          "_comment": {
                            "node": {
                              "description": "Add comments that will not be processing, but are useful for code explanation",
                              "title": "CommentBase._comment",
                              "type": "string",
                            },
                            "required": false,
                          },
                          "attributes": {
                            "node": {
                              "additionalProperties": {
                                "type": "any",
                              },
                              "description": "View meta-properties",
                              "properties": {},
                              "title": "NavigationFlowViewState.attributes",
                              "type": "object",
                            },
                            "required": false,
                          },
                          "exp": {
                            "node": {
                              "name": undefined,
                              "title": "NavigationBaseState.exp",
                              "type": "never",
                            },
                            "required": false,
                          },
                          "onEnd": {
                            "node": {
                              "description": "An optional expression to run before view transition",
                              "or": [
                                {
                                  "genericArguments": undefined,
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onEnd",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "genericTokens": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onEnd",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "onStart": {
                            "node": {
                              "description": "An optional expression to run when this view renders",
                              "or": [
                                {
                                  "genericArguments": undefined,
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onStart",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "genericTokens": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onStart",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "ref": {
                            "node": {
                              "description": "An id corresponding to a view from the "views" array",
                              "title": "NavigationFlowViewState.ref",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "state_type": {
                            "node": {
                              "const": "VIEW",
                              "description": "A property to determine the type of state this is",
                              "title": "NavigationBaseState.state_type",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "transitions": {
                            "node": {
                              "description": "A mapping of transition-name to FlowState name",
                              "genericTokens": undefined,
                              "keyType": {
                                "type": "string",
                              },
                              "name": "NavigationFlowTransition",
                              "source": "filename.ts",
                              "title": "NavigationFlowTransitionableState.transitions",
                              "type": "record",
                              "valueType": {
                                "type": "string",
                              },
                            },
                            "required": true,
                          },
                        },
                        "source": "filename.ts",
                        "title": "NavigationFlowViewState",
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An END state of the flow.",
                        "genericTokens": undefined,
                        "name": "NavigationFlowEndState",
                        "properties": {
                          "_comment": {
                            "node": {
                              "description": "Add comments that will not be processing, but are useful for code explanation",
                              "title": "CommentBase._comment",
                              "type": "string",
                            },
                            "required": false,
                          },
                          "exp": {
                            "node": {
                              "name": undefined,
                              "title": "NavigationBaseState.exp",
                              "type": "never",
                            },
                            "required": false,
                          },
                          "onEnd": {
                            "node": {
                              "description": "An optional expression to run before view transition",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onEnd",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onEnd",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "onStart": {
                            "node": {
                              "description": "An optional expression to run when this view renders",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onStart",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onStart",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "outcome": {
                            "node": {
                              "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
                              "title": "NavigationFlowEndState.outcome",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "state_type": {
                            "node": {
                              "const": "END",
                              "description": "A property to determine the type of state this is",
                              "title": "NavigationBaseState.state_type",
                              "type": "string",
                            },
                            "required": true,
                          },
                        },
                        "source": "filename.ts",
                        "title": "NavigationFlowEndState",
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "genericTokens": undefined,
                        "name": "NavigationFlowFlowState",
                        "properties": {
                          "_comment": {
                            "node": {
                              "description": "Add comments that will not be processing, but are useful for code explanation",
                              "title": "CommentBase._comment",
                              "type": "string",
                            },
                            "required": false,
                          },
                          "exp": {
                            "node": {
                              "name": undefined,
                              "title": "NavigationBaseState.exp",
                              "type": "never",
                            },
                            "required": false,
                          },
                          "onEnd": {
                            "node": {
                              "description": "An optional expression to run before view transition",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onEnd",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onEnd",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "onStart": {
                            "node": {
                              "description": "An optional expression to run when this view renders",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onStart",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onStart",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "ref": {
                            "node": {
                              "description": "A reference to a FLOW id state to run",
                              "title": "NavigationFlowFlowState.ref",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "state_type": {
                            "node": {
                              "const": "FLOW",
                              "description": "A property to determine the type of state this is",
                              "title": "NavigationBaseState.state_type",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "transitions": {
                            "node": {
                              "description": "A mapping of transition-name to FlowState name",
                              "keyType": {
                                "type": "string",
                              },
                              "name": "NavigationFlowTransition",
                              "source": "filename.ts",
                              "title": "NavigationFlowTransitionableState.transitions",
                              "type": "record",
                              "valueType": {
                                "type": "string",
                              },
                            },
                            "required": true,
                          },
                        },
                        "source": "filename.ts",
                        "title": "NavigationFlowFlowState",
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Action states execute an expression to determine the next state to transition to",
                        "genericTokens": undefined,
                        "name": "NavigationFlowActionState",
                        "properties": {
                          "_comment": {
                            "node": {
                              "description": "Add comments that will not be processing, but are useful for code explanation",
                              "title": "CommentBase._comment",
                              "type": "string",
                            },
                            "required": false,
                          },
                          "exp": {
                            "node": {
                              "description": "An expression to execute.
The return value determines the transition to take",
                              "genericArguments": undefined,
                              "ref": "Expression",
                              "title": "NavigationFlowActionState.exp",
                              "type": "ref",
                            },
                            "required": true,
                          },
                          "onEnd": {
                            "node": {
                              "description": "An optional expression to run before view transition",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onEnd",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onEnd",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "onStart": {
                            "node": {
                              "description": "An optional expression to run when this view renders",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onStart",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onStart",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "state_type": {
                            "node": {
                              "const": "ACTION",
                              "description": "A property to determine the type of state this is",
                              "title": "NavigationBaseState.state_type",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "transitions": {
                            "node": {
                              "description": "A mapping of transition-name to FlowState name",
                              "keyType": {
                                "type": "string",
                              },
                              "name": "NavigationFlowTransition",
                              "source": "filename.ts",
                              "title": "NavigationFlowTransitionableState.transitions",
                              "type": "record",
                              "valueType": {
                                "type": "string",
                              },
                            },
                            "required": true,
                          },
                        },
                        "source": "filename.ts",
                        "title": "NavigationFlowActionState",
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "description": "External Flow states represent states in the FSM that can't be resolved internally in Player.
The flow will wait for the embedded application to manage moving to the next state via a transition",
                        "genericTokens": undefined,
                        "name": "NavigationFlowExternalState",
                        "properties": {
                          "_comment": {
                            "node": {
                              "description": "Add comments that will not be processing, but are useful for code explanation",
                              "title": "CommentBase._comment",
                              "type": "string",
                            },
                            "required": false,
                          },
                          "exp": {
                            "node": {
                              "name": undefined,
                              "title": "NavigationBaseState.exp",
                              "type": "never",
                            },
                            "required": false,
                          },
                          "onEnd": {
                            "node": {
                              "description": "An optional expression to run before view transition",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onEnd",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onEnd",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "onStart": {
                            "node": {
                              "description": "An optional expression to run when this view renders",
                              "or": [
                                {
                                  "ref": "Expression",
                                  "title": "NavigationBaseState.onStart",
                                  "type": "ref",
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "An object with an expression in it",
                                  "extends": undefined,
                                  "name": "ExpressionObject",
                                  "properties": {
                                    "exp": {
                                      "node": {
                                        "description": "The expression to run",
                                        "ref": "Expression",
                                        "title": "ExpressionObject.exp",
                                        "type": "ref",
                                      },
                                      "required": false,
                                    },
                                  },
                                  "source": "filename.ts",
                                  "title": "ExpressionObject",
                                  "type": "object",
                                },
                              ],
                              "title": "NavigationBaseState.onStart",
                              "type": "or",
                            },
                            "required": false,
                          },
                          "ref": {
                            "node": {
                              "description": "A reference for this external state",
                              "title": "NavigationFlowExternalState.ref",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "state_type": {
                            "node": {
                              "const": "EXTERNAL",
                              "description": "A property to determine the type of state this is",
                              "title": "NavigationBaseState.state_type",
                              "type": "string",
                            },
                            "required": true,
                          },
                          "transitions": {
                            "node": {
                              "description": "A mapping of transition-name to FlowState name",
                              "keyType": {
                                "type": "string",
                              },
                              "name": "NavigationFlowTransition",
                              "source": "filename.ts",
                              "title": "NavigationFlowTransitionableState.transitions",
                              "type": "record",
                              "valueType": {
                                "type": "string",
                              },
                            },
                            "required": true,
                          },
                        },
                        "source": "filename.ts",
                        "title": "NavigationFlowExternalState",
                        "type": "object",
                      },
                    ],
                    "source": "filename.ts",
                    "title": "NavigationFlowState",
                    "type": "or",
                  },
                ],
                "type": "or",
              },
              "description": "A state machine in the navigation",
              "genericTokens": undefined,
              "name": "NavigationFlow",
              "properties": {
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run when this Flow ends",
                    "or": [
                      {
                        "genericArguments": undefined,
                        "ref": "Expression",
                        "title": "NavigationFlow.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "genericTokens": undefined,
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationFlow.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this Flow starts",
                    "or": [
                      {
                        "genericArguments": undefined,
                        "ref": "Expression",
                        "title": "NavigationFlow.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "genericTokens": undefined,
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "genericArguments": undefined,
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationFlow.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "startState": {
                  "node": {
                    "description": "The first state to kick off the state machine",
                    "title": "NavigationFlow.startState",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlow",
              "type": "object",
            },
          ],
          "type": "or",
        },
      },
    ],
    "description": "The navigation section of the flow describes a State Machine for the user.",
    "genericTokens": undefined,
    "name": "Navigation",
    "source": "filename.ts",
    "title": "Navigation",
    "type": "and",
  },
  {
    "additionalProperties": false,
    "description": "An object with an expression in it",
    "genericTokens": undefined,
    "name": "ExpressionObject",
    "properties": {
      "exp": {
        "node": {
          "description": "The expression to run",
          "ref": "Expression",
          "title": "ExpressionObject.exp",
          "type": "ref",
        },
        "required": false,
      },
    },
    "source": "filename.ts",
    "title": "ExpressionObject",
    "type": "object",
  },
  {
    "additionalProperties": {
      "or": [
        {
          "type": "undefined",
        },
        {
          "type": "string",
        },
        {
          "ref": "Expression",
          "type": "ref",
        },
        {
          "additionalProperties": false,
          "description": "An object with an expression in it",
          "name": "ExpressionObject",
          "properties": {
            "exp": {
              "node": {
                "description": "The expression to run",
                "ref": "Expression",
                "title": "ExpressionObject.exp",
                "type": "ref",
              },
              "required": false,
            },
          },
          "source": "filename.ts",
          "title": "ExpressionObject",
          "type": "object",
        },
        {
          "name": "NavigationFlowState",
          "or": [
            {
              "additionalProperties": false,
              "description": "A state representing a view",
              "name": "NavigationFlowViewState",
              "properties": {
                "_comment": {
                  "node": {
                    "description": "Add comments that will not be processing, but are useful for code explanation",
                    "title": "CommentBase._comment",
                    "type": "string",
                  },
                  "required": false,
                },
                "attributes": {
                  "node": {
                    "additionalProperties": {
                      "type": "any",
                    },
                    "description": "View meta-properties",
                    "properties": {},
                    "title": "NavigationFlowViewState.attributes",
                    "type": "object",
                  },
                  "required": false,
                },
                "exp": {
                  "node": {
                    "title": "NavigationBaseState.exp",
                    "type": "never",
                  },
                  "required": false,
                },
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run before view transition",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this view renders",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "ref": {
                  "node": {
                    "description": "An id corresponding to a view from the "views" array",
                    "title": "NavigationFlowViewState.ref",
                    "type": "string",
                  },
                  "required": true,
                },
                "state_type": {
                  "node": {
                    "const": "VIEW",
                    "description": "A property to determine the type of state this is",
                    "title": "NavigationBaseState.state_type",
                    "type": "string",
                  },
                  "required": true,
                },
                "transitions": {
                  "node": {
                    "description": "A mapping of transition-name to FlowState name",
                    "keyType": {
                      "type": "string",
                    },
                    "name": "NavigationFlowTransition",
                    "source": "filename.ts",
                    "title": "NavigationFlowTransitionableState.transitions",
                    "type": "record",
                    "valueType": {
                      "type": "string",
                    },
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlowViewState",
              "type": "object",
            },
            {
              "additionalProperties": false,
              "description": "An END state of the flow.",
              "name": "NavigationFlowEndState",
              "properties": {
                "_comment": {
                  "node": {
                    "description": "Add comments that will not be processing, but are useful for code explanation",
                    "title": "CommentBase._comment",
                    "type": "string",
                  },
                  "required": false,
                },
                "exp": {
                  "node": {
                    "title": "NavigationBaseState.exp",
                    "type": "never",
                  },
                  "required": false,
                },
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run before view transition",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this view renders",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "outcome": {
                  "node": {
                    "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
                    "title": "NavigationFlowEndState.outcome",
                    "type": "string",
                  },
                  "required": true,
                },
                "state_type": {
                  "node": {
                    "const": "END",
                    "description": "A property to determine the type of state this is",
                    "title": "NavigationBaseState.state_type",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlowEndState",
              "type": "object",
            },
            {
              "additionalProperties": false,
              "name": "NavigationFlowFlowState",
              "properties": {
                "_comment": {
                  "node": {
                    "description": "Add comments that will not be processing, but are useful for code explanation",
                    "title": "CommentBase._comment",
                    "type": "string",
                  },
                  "required": false,
                },
                "exp": {
                  "node": {
                    "title": "NavigationBaseState.exp",
                    "type": "never",
                  },
                  "required": false,
                },
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run before view transition",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this view renders",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "ref": {
                  "node": {
                    "description": "A reference to a FLOW id state to run",
                    "title": "NavigationFlowFlowState.ref",
                    "type": "string",
                  },
                  "required": true,
                },
                "state_type": {
                  "node": {
                    "const": "FLOW",
                    "description": "A property to determine the type of state this is",
                    "title": "NavigationBaseState.state_type",
                    "type": "string",
                  },
                  "required": true,
                },
                "transitions": {
                  "node": {
                    "description": "A mapping of transition-name to FlowState name",
                    "keyType": {
                      "type": "string",
                    },
                    "name": "NavigationFlowTransition",
                    "source": "filename.ts",
                    "title": "NavigationFlowTransitionableState.transitions",
                    "type": "record",
                    "valueType": {
                      "type": "string",
                    },
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlowFlowState",
              "type": "object",
            },
            {
              "additionalProperties": false,
              "description": "Action states execute an expression to determine the next state to transition to",
              "name": "NavigationFlowActionState",
              "properties": {
                "_comment": {
                  "node": {
                    "description": "Add comments that will not be processing, but are useful for code explanation",
                    "title": "CommentBase._comment",
                    "type": "string",
                  },
                  "required": false,
                },
                "exp": {
                  "node": {
                    "description": "An expression to execute.
The return value determines the transition to take",
                    "ref": "Expression",
                    "title": "NavigationFlowActionState.exp",
                    "type": "ref",
                  },
                  "required": true,
                },
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run before view transition",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this view renders",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "state_type": {
                  "node": {
                    "const": "ACTION",
                    "description": "A property to determine the type of state this is",
                    "title": "NavigationBaseState.state_type",
                    "type": "string",
                  },
                  "required": true,
                },
                "transitions": {
                  "node": {
                    "description": "A mapping of transition-name to FlowState name",
                    "keyType": {
                      "type": "string",
                    },
                    "name": "NavigationFlowTransition",
                    "source": "filename.ts",
                    "title": "NavigationFlowTransitionableState.transitions",
                    "type": "record",
                    "valueType": {
                      "type": "string",
                    },
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlowActionState",
              "type": "object",
            },
            {
              "additionalProperties": false,
              "description": "External Flow states represent states in the FSM that can't be resolved internally in Player.
The flow will wait for the embedded application to manage moving to the next state via a transition",
              "name": "NavigationFlowExternalState",
              "properties": {
                "_comment": {
                  "node": {
                    "description": "Add comments that will not be processing, but are useful for code explanation",
                    "title": "CommentBase._comment",
                    "type": "string",
                  },
                  "required": false,
                },
                "exp": {
                  "node": {
                    "title": "NavigationBaseState.exp",
                    "type": "never",
                  },
                  "required": false,
                },
                "onEnd": {
                  "node": {
                    "description": "An optional expression to run before view transition",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onEnd",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onEnd",
                    "type": "or",
                  },
                  "required": false,
                },
                "onStart": {
                  "node": {
                    "description": "An optional expression to run when this view renders",
                    "or": [
                      {
                        "ref": "Expression",
                        "title": "NavigationBaseState.onStart",
                        "type": "ref",
                      },
                      {
                        "additionalProperties": false,
                        "description": "An object with an expression in it",
                        "name": "ExpressionObject",
                        "properties": {
                          "exp": {
                            "node": {
                              "description": "The expression to run",
                              "ref": "Expression",
                              "title": "ExpressionObject.exp",
                              "type": "ref",
                            },
                            "required": false,
                          },
                        },
                        "source": "filename.ts",
                        "title": "ExpressionObject",
                        "type": "object",
                      },
                    ],
                    "title": "NavigationBaseState.onStart",
                    "type": "or",
                  },
                  "required": false,
                },
                "ref": {
                  "node": {
                    "description": "A reference for this external state",
                    "title": "NavigationFlowExternalState.ref",
                    "type": "string",
                  },
                  "required": true,
                },
                "state_type": {
                  "node": {
                    "const": "EXTERNAL",
                    "description": "A property to determine the type of state this is",
                    "title": "NavigationBaseState.state_type",
                    "type": "string",
                  },
                  "required": true,
                },
                "transitions": {
                  "node": {
                    "description": "A mapping of transition-name to FlowState name",
                    "keyType": {
                      "type": "string",
                    },
                    "name": "NavigationFlowTransition",
                    "source": "filename.ts",
                    "title": "NavigationFlowTransitionableState.transitions",
                    "type": "record",
                    "valueType": {
                      "type": "string",
                    },
                  },
                  "required": true,
                },
              },
              "source": "filename.ts",
              "title": "NavigationFlowExternalState",
              "type": "object",
            },
          ],
          "source": "filename.ts",
          "title": "NavigationFlowState",
          "type": "or",
        },
      ],
      "type": "or",
    },
    "description": "A state machine in the navigation",
    "genericTokens": undefined,
    "name": "NavigationFlow",
    "properties": {
      "onEnd": {
        "node": {
          "description": "An optional expression to run when this Flow ends",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationFlow.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationFlow.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this Flow starts",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationFlow.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationFlow.onStart",
          "type": "or",
        },
        "required": false,
      },
      "startState": {
        "node": {
          "description": "The first state to kick off the state machine",
          "title": "NavigationFlow.startState",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlow",
    "type": "object",
  },
  {
    "genericTokens": undefined,
    "keyType": {
      "type": "string",
    },
    "name": "NavigationFlowTransition",
    "source": "filename.ts",
    "title": "NavigationFlowTransition",
    "type": "record",
    "valueType": {
      "type": "string",
    },
  },
  {
    "additionalProperties": false,
    "description": "The base representation of a state within a Flow",
    "genericTokens": [
      {
        "constraints": {
          "type": "string",
        },
        "default": {
          "type": "any",
        },
        "symbol": "T",
      },
    ],
    "name": "NavigationBaseState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "check": {
            "left": {
              "ref": "T",
              "type": "ref",
            },
            "right": {
              "const": "ACTION",
              "type": "string",
            },
          },
          "description": "TS gets really confused with both the ActionState and the onStart state both declaring the \`exp\` property
So this explicity says there should never be an exp prop on a state node that"s not of type "ACTION'",
          "title": "NavigationBaseState.exp",
          "type": "conditional",
          "value": {
            "false": {
              "type": "never",
            },
            "true": {
              "ref": "Expression",
              "type": "ref",
            },
          },
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "state_type": {
        "node": {
          "description": "A property to determine the type of state this is",
          "ref": "T",
          "title": "NavigationBaseState.state_type",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationBaseState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "A generic state that can transition to another state",
    "genericTokens": [
      {
        "constraints": {
          "type": "string",
        },
        "default": {
          "type": "any",
        },
        "symbol": "T",
      },
    ],
    "name": "NavigationFlowTransitionableState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "check": {
            "left": {
              "ref": "T",
              "type": "ref",
            },
            "right": {
              "const": "ACTION",
              "type": "string",
            },
          },
          "description": "TS gets really confused with both the ActionState and the onStart state both declaring the \`exp\` property
So this explicity says there should never be an exp prop on a state node that"s not of type "ACTION'",
          "title": "NavigationBaseState.exp",
          "type": "conditional",
          "value": {
            "false": {
              "type": "never",
            },
            "true": {
              "ref": "Expression",
              "type": "ref",
            },
          },
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "state_type": {
        "node": {
          "description": "A property to determine the type of state this is",
          "ref": "T",
          "title": "NavigationBaseState.state_type",
          "type": "ref",
        },
        "required": true,
      },
      "transitions": {
        "node": {
          "description": "A mapping of transition-name to FlowState name",
          "keyType": {
            "type": "string",
          },
          "name": "NavigationFlowTransition",
          "source": "filename.ts",
          "title": "NavigationFlowTransitionableState.transitions",
          "type": "record",
          "valueType": {
            "type": "string",
          },
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowTransitionableState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "A state representing a view",
    "genericTokens": undefined,
    "name": "NavigationFlowViewState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "attributes": {
        "node": {
          "additionalProperties": {
            "type": "any",
          },
          "description": "View meta-properties",
          "properties": {},
          "title": "NavigationFlowViewState.attributes",
          "type": "object",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "name": undefined,
          "title": "NavigationBaseState.exp",
          "type": "never",
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "ref": {
        "node": {
          "description": "An id corresponding to a view from the "views" array",
          "title": "NavigationFlowViewState.ref",
          "type": "string",
        },
        "required": true,
      },
      "state_type": {
        "node": {
          "const": "VIEW",
          "description": "A property to determine the type of state this is",
          "title": "NavigationBaseState.state_type",
          "type": "string",
        },
        "required": true,
      },
      "transitions": {
        "node": {
          "description": "A mapping of transition-name to FlowState name",
          "keyType": {
            "type": "string",
          },
          "name": "NavigationFlowTransition",
          "source": "filename.ts",
          "title": "NavigationFlowTransitionableState.transitions",
          "type": "record",
          "valueType": {
            "type": "string",
          },
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowViewState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "An END state of the flow.",
    "genericTokens": undefined,
    "name": "NavigationFlowEndState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "name": undefined,
          "title": "NavigationBaseState.exp",
          "type": "never",
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "outcome": {
        "node": {
          "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
          "title": "NavigationFlowEndState.outcome",
          "type": "string",
        },
        "required": true,
      },
      "state_type": {
        "node": {
          "const": "END",
          "description": "A property to determine the type of state this is",
          "title": "NavigationBaseState.state_type",
          "type": "string",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowEndState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "Action states execute an expression to determine the next state to transition to",
    "genericTokens": undefined,
    "name": "NavigationFlowActionState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "description": "An expression to execute.
The return value determines the transition to take",
          "ref": "Expression",
          "title": "NavigationFlowActionState.exp",
          "type": "ref",
        },
        "required": true,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "state_type": {
        "node": {
          "const": "ACTION",
          "description": "A property to determine the type of state this is",
          "title": "NavigationBaseState.state_type",
          "type": "string",
        },
        "required": true,
      },
      "transitions": {
        "node": {
          "description": "A mapping of transition-name to FlowState name",
          "keyType": {
            "type": "string",
          },
          "name": "NavigationFlowTransition",
          "source": "filename.ts",
          "title": "NavigationFlowTransitionableState.transitions",
          "type": "record",
          "valueType": {
            "type": "string",
          },
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowActionState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "External Flow states represent states in the FSM that can't be resolved internally in Player.
The flow will wait for the embedded application to manage moving to the next state via a transition",
    "genericTokens": undefined,
    "name": "NavigationFlowExternalState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "name": undefined,
          "title": "NavigationBaseState.exp",
          "type": "never",
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "ref": {
        "node": {
          "description": "A reference for this external state",
          "title": "NavigationFlowExternalState.ref",
          "type": "string",
        },
        "required": true,
      },
      "state_type": {
        "node": {
          "const": "EXTERNAL",
          "description": "A property to determine the type of state this is",
          "title": "NavigationBaseState.state_type",
          "type": "string",
        },
        "required": true,
      },
      "transitions": {
        "node": {
          "description": "A mapping of transition-name to FlowState name",
          "keyType": {
            "type": "string",
          },
          "name": "NavigationFlowTransition",
          "source": "filename.ts",
          "title": "NavigationFlowTransitionableState.transitions",
          "type": "record",
          "valueType": {
            "type": "string",
          },
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowExternalState",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "genericTokens": undefined,
    "name": "NavigationFlowFlowState",
    "properties": {
      "_comment": {
        "node": {
          "description": "Add comments that will not be processing, but are useful for code explanation",
          "title": "CommentBase._comment",
          "type": "string",
        },
        "required": false,
      },
      "exp": {
        "node": {
          "name": undefined,
          "title": "NavigationBaseState.exp",
          "type": "never",
        },
        "required": false,
      },
      "onEnd": {
        "node": {
          "description": "An optional expression to run before view transition",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onEnd",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onEnd",
          "type": "or",
        },
        "required": false,
      },
      "onStart": {
        "node": {
          "description": "An optional expression to run when this view renders",
          "or": [
            {
              "ref": "Expression",
              "title": "NavigationBaseState.onStart",
              "type": "ref",
            },
            {
              "additionalProperties": false,
              "description": "An object with an expression in it",
              "extends": undefined,
              "name": "ExpressionObject",
              "properties": {
                "exp": {
                  "node": {
                    "description": "The expression to run",
                    "ref": "Expression",
                    "title": "ExpressionObject.exp",
                    "type": "ref",
                  },
                  "required": false,
                },
              },
              "source": "filename.ts",
              "title": "ExpressionObject",
              "type": "object",
            },
          ],
          "title": "NavigationBaseState.onStart",
          "type": "or",
        },
        "required": false,
      },
      "ref": {
        "node": {
          "description": "A reference to a FLOW id state to run",
          "title": "NavigationFlowFlowState.ref",
          "type": "string",
        },
        "required": true,
      },
      "state_type": {
        "node": {
          "const": "FLOW",
          "description": "A property to determine the type of state this is",
          "title": "NavigationBaseState.state_type",
          "type": "string",
        },
        "required": true,
      },
      "transitions": {
        "node": {
          "description": "A mapping of transition-name to FlowState name",
          "keyType": {
            "type": "string",
          },
          "name": "NavigationFlowTransition",
          "source": "filename.ts",
          "title": "NavigationFlowTransitionableState.transitions",
          "type": "record",
          "valueType": {
            "type": "string",
          },
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "NavigationFlowFlowState",
    "type": "object",
  },
  {
    "genericTokens": undefined,
    "name": "NavigationFlowState",
    "or": [
      {
        "additionalProperties": false,
        "description": "A state representing a view",
        "name": "NavigationFlowViewState",
        "properties": {
          "_comment": {
            "node": {
              "description": "Add comments that will not be processing, but are useful for code explanation",
              "title": "CommentBase._comment",
              "type": "string",
            },
            "required": false,
          },
          "attributes": {
            "node": {
              "additionalProperties": {
                "type": "any",
              },
              "description": "View meta-properties",
              "properties": {},
              "title": "NavigationFlowViewState.attributes",
              "type": "object",
            },
            "required": false,
          },
          "exp": {
            "node": {
              "title": "NavigationBaseState.exp",
              "type": "never",
            },
            "required": false,
          },
          "onEnd": {
            "node": {
              "description": "An optional expression to run before view transition",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onEnd",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onEnd",
              "type": "or",
            },
            "required": false,
          },
          "onStart": {
            "node": {
              "description": "An optional expression to run when this view renders",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onStart",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onStart",
              "type": "or",
            },
            "required": false,
          },
          "ref": {
            "node": {
              "description": "An id corresponding to a view from the "views" array",
              "title": "NavigationFlowViewState.ref",
              "type": "string",
            },
            "required": true,
          },
          "state_type": {
            "node": {
              "const": "VIEW",
              "description": "A property to determine the type of state this is",
              "title": "NavigationBaseState.state_type",
              "type": "string",
            },
            "required": true,
          },
          "transitions": {
            "node": {
              "description": "A mapping of transition-name to FlowState name",
              "keyType": {
                "type": "string",
              },
              "name": "NavigationFlowTransition",
              "source": "filename.ts",
              "title": "NavigationFlowTransitionableState.transitions",
              "type": "record",
              "valueType": {
                "type": "string",
              },
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "NavigationFlowViewState",
        "type": "object",
      },
      {
        "additionalProperties": false,
        "description": "An END state of the flow.",
        "name": "NavigationFlowEndState",
        "properties": {
          "_comment": {
            "node": {
              "description": "Add comments that will not be processing, but are useful for code explanation",
              "title": "CommentBase._comment",
              "type": "string",
            },
            "required": false,
          },
          "exp": {
            "node": {
              "title": "NavigationBaseState.exp",
              "type": "never",
            },
            "required": false,
          },
          "onEnd": {
            "node": {
              "description": "An optional expression to run before view transition",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onEnd",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onEnd",
              "type": "or",
            },
            "required": false,
          },
          "onStart": {
            "node": {
              "description": "An optional expression to run when this view renders",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onStart",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onStart",
              "type": "or",
            },
            "required": false,
          },
          "outcome": {
            "node": {
              "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
              "title": "NavigationFlowEndState.outcome",
              "type": "string",
            },
            "required": true,
          },
          "state_type": {
            "node": {
              "const": "END",
              "description": "A property to determine the type of state this is",
              "title": "NavigationBaseState.state_type",
              "type": "string",
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "NavigationFlowEndState",
        "type": "object",
      },
      {
        "additionalProperties": false,
        "name": "NavigationFlowFlowState",
        "properties": {
          "_comment": {
            "node": {
              "description": "Add comments that will not be processing, but are useful for code explanation",
              "title": "CommentBase._comment",
              "type": "string",
            },
            "required": false,
          },
          "exp": {
            "node": {
              "title": "NavigationBaseState.exp",
              "type": "never",
            },
            "required": false,
          },
          "onEnd": {
            "node": {
              "description": "An optional expression to run before view transition",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onEnd",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onEnd",
              "type": "or",
            },
            "required": false,
          },
          "onStart": {
            "node": {
              "description": "An optional expression to run when this view renders",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onStart",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onStart",
              "type": "or",
            },
            "required": false,
          },
          "ref": {
            "node": {
              "description": "A reference to a FLOW id state to run",
              "title": "NavigationFlowFlowState.ref",
              "type": "string",
            },
            "required": true,
          },
          "state_type": {
            "node": {
              "const": "FLOW",
              "description": "A property to determine the type of state this is",
              "title": "NavigationBaseState.state_type",
              "type": "string",
            },
            "required": true,
          },
          "transitions": {
            "node": {
              "description": "A mapping of transition-name to FlowState name",
              "keyType": {
                "type": "string",
              },
              "name": "NavigationFlowTransition",
              "source": "filename.ts",
              "title": "NavigationFlowTransitionableState.transitions",
              "type": "record",
              "valueType": {
                "type": "string",
              },
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "NavigationFlowFlowState",
        "type": "object",
      },
      {
        "additionalProperties": false,
        "description": "Action states execute an expression to determine the next state to transition to",
        "name": "NavigationFlowActionState",
        "properties": {
          "_comment": {
            "node": {
              "description": "Add comments that will not be processing, but are useful for code explanation",
              "title": "CommentBase._comment",
              "type": "string",
            },
            "required": false,
          },
          "exp": {
            "node": {
              "description": "An expression to execute.
The return value determines the transition to take",
              "ref": "Expression",
              "title": "NavigationFlowActionState.exp",
              "type": "ref",
            },
            "required": true,
          },
          "onEnd": {
            "node": {
              "description": "An optional expression to run before view transition",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onEnd",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onEnd",
              "type": "or",
            },
            "required": false,
          },
          "onStart": {
            "node": {
              "description": "An optional expression to run when this view renders",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onStart",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onStart",
              "type": "or",
            },
            "required": false,
          },
          "state_type": {
            "node": {
              "const": "ACTION",
              "description": "A property to determine the type of state this is",
              "title": "NavigationBaseState.state_type",
              "type": "string",
            },
            "required": true,
          },
          "transitions": {
            "node": {
              "description": "A mapping of transition-name to FlowState name",
              "keyType": {
                "type": "string",
              },
              "name": "NavigationFlowTransition",
              "source": "filename.ts",
              "title": "NavigationFlowTransitionableState.transitions",
              "type": "record",
              "valueType": {
                "type": "string",
              },
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "NavigationFlowActionState",
        "type": "object",
      },
      {
        "additionalProperties": false,
        "description": "External Flow states represent states in the FSM that can't be resolved internally in Player.
The flow will wait for the embedded application to manage moving to the next state via a transition",
        "name": "NavigationFlowExternalState",
        "properties": {
          "_comment": {
            "node": {
              "description": "Add comments that will not be processing, but are useful for code explanation",
              "title": "CommentBase._comment",
              "type": "string",
            },
            "required": false,
          },
          "exp": {
            "node": {
              "title": "NavigationBaseState.exp",
              "type": "never",
            },
            "required": false,
          },
          "onEnd": {
            "node": {
              "description": "An optional expression to run before view transition",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onEnd",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onEnd",
              "type": "or",
            },
            "required": false,
          },
          "onStart": {
            "node": {
              "description": "An optional expression to run when this view renders",
              "or": [
                {
                  "ref": "Expression",
                  "title": "NavigationBaseState.onStart",
                  "type": "ref",
                },
                {
                  "additionalProperties": false,
                  "description": "An object with an expression in it",
                  "name": "ExpressionObject",
                  "properties": {
                    "exp": {
                      "node": {
                        "description": "The expression to run",
                        "ref": "Expression",
                        "title": "ExpressionObject.exp",
                        "type": "ref",
                      },
                      "required": false,
                    },
                  },
                  "source": "filename.ts",
                  "title": "ExpressionObject",
                  "type": "object",
                },
              ],
              "title": "NavigationBaseState.onStart",
              "type": "or",
            },
            "required": false,
          },
          "ref": {
            "node": {
              "description": "A reference for this external state",
              "title": "NavigationFlowExternalState.ref",
              "type": "string",
            },
            "required": true,
          },
          "state_type": {
            "node": {
              "const": "EXTERNAL",
              "description": "A property to determine the type of state this is",
              "title": "NavigationBaseState.state_type",
              "type": "string",
            },
            "required": true,
          },
          "transitions": {
            "node": {
              "description": "A mapping of transition-name to FlowState name",
              "keyType": {
                "type": "string",
              },
              "name": "NavigationFlowTransition",
              "source": "filename.ts",
              "title": "NavigationFlowTransitionableState.transitions",
              "type": "record",
              "valueType": {
                "type": "string",
              },
            },
            "required": true,
          },
        },
        "source": "filename.ts",
        "title": "NavigationFlowExternalState",
        "type": "object",
      },
    ],
    "source": "filename.ts",
    "title": "NavigationFlowState",
    "type": "or",
  },
  {
    "additionalProperties": false,
    "description": "The data at the end of a flow",
    "genericTokens": undefined,
    "name": "FlowResult",
    "properties": {
      "data": {
        "node": {
          "description": "The serialized data-model",
          "title": "FlowResult.data",
          "type": "any",
        },
        "required": false,
      },
      "endState": {
        "node": {
          "additionalProperties": false,
          "description": "The outcome describes _how_ the flow ended (forwards, backwards, etc)",
          "genericTokens": undefined,
          "name": "NavigationFlowEndState",
          "properties": {
            "_comment": {
              "node": {
                "description": "Add comments that will not be processing, but are useful for code explanation",
                "title": "CommentBase._comment",
                "type": "string",
              },
              "required": false,
            },
            "exp": {
              "node": {
                "name": undefined,
                "title": "NavigationBaseState.exp",
                "type": "never",
              },
              "required": false,
            },
            "onEnd": {
              "node": {
                "description": "An optional expression to run before view transition",
                "or": [
                  {
                    "ref": "Expression",
                    "title": "NavigationBaseState.onEnd",
                    "type": "ref",
                  },
                  {
                    "additionalProperties": false,
                    "description": "An object with an expression in it",
                    "extends": undefined,
                    "name": "ExpressionObject",
                    "properties": {
                      "exp": {
                        "node": {
                          "description": "The expression to run",
                          "ref": "Expression",
                          "title": "ExpressionObject.exp",
                          "type": "ref",
                        },
                        "required": false,
                      },
                    },
                    "source": "filename.ts",
                    "title": "ExpressionObject",
                    "type": "object",
                  },
                ],
                "title": "NavigationBaseState.onEnd",
                "type": "or",
              },
              "required": false,
            },
            "onStart": {
              "node": {
                "description": "An optional expression to run when this view renders",
                "or": [
                  {
                    "ref": "Expression",
                    "title": "NavigationBaseState.onStart",
                    "type": "ref",
                  },
                  {
                    "additionalProperties": false,
                    "description": "An object with an expression in it",
                    "extends": undefined,
                    "name": "ExpressionObject",
                    "properties": {
                      "exp": {
                        "node": {
                          "description": "The expression to run",
                          "ref": "Expression",
                          "title": "ExpressionObject.exp",
                          "type": "ref",
                        },
                        "required": false,
                      },
                    },
                    "source": "filename.ts",
                    "title": "ExpressionObject",
                    "type": "object",
                  },
                ],
                "title": "NavigationBaseState.onStart",
                "type": "or",
              },
              "required": false,
            },
            "outcome": {
              "node": {
                "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
                "title": "NavigationFlowEndState.outcome",
                "type": "string",
              },
              "required": true,
            },
            "state_type": {
              "node": {
                "const": "END",
                "description": "A property to determine the type of state this is",
                "title": "NavigationBaseState.state_type",
                "type": "string",
              },
              "required": true,
            },
          },
          "source": "filename.ts",
          "title": "FlowResult.endState",
          "type": "object",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "FlowResult",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "Any object that contains 1 or more templates",
    "genericTokens": undefined,
    "name": "Templatable",
    "properties": {
      "template": {
        "node": {
          "description": "A list of templates to process for this node",
          "elementType": {
            "additionalProperties": false,
            "description": "A template describes a mapping from a data array -> array of objects",
            "genericTokens": [
              {
                "constraints": {
                  "type": "any",
                },
                "default": {
                  "type": "unknown",
                },
                "symbol": "ValueType",
              },
              {
                "constraints": {
                  "type": "string",
                },
                "default": {
                  "type": "string",
                },
                "symbol": "Key",
              },
            ],
            "name": "Template",
            "properties": {
              "data": {
                "node": {
                  "description": "A pointer to the data-model containing an array of elements to map over",
                  "genericArguments": undefined,
                  "ref": "Binding",
                  "title": "Template.data",
                  "type": "ref",
                },
                "required": true,
              },
              "dynamic": {
                "node": {
                  "description": "should the template be recomputed when data changes",
                  "title": "Template.dynamic",
                  "type": "boolean",
                },
                "required": false,
              },
              "output": {
                "node": {
                  "description": "A property on the parent object to store the new map under.
If it already exists, values are appended to the end.",
                  "ref": "Key",
                  "title": "Template.output",
                  "type": "ref",
                },
                "required": true,
              },
              "value": {
                "node": {
                  "description": "The template to iterate over using each value in the supplied template data.
Any reference to _index_ is replaced with the current iteration index.",
                  "ref": "ValueType",
                  "title": "Template.value",
                  "type": "ref",
                },
                "required": true,
              },
            },
            "source": "filename.ts",
            "title": "Template",
            "type": "object",
          },
          "title": "Templatable.template",
          "type": "array",
        },
        "required": false,
      },
    },
    "source": "filename.ts",
    "title": "Templatable",
    "type": "object",
  },
  {
    "additionalProperties": false,
    "description": "A template describes a mapping from a data array -> array of objects",
    "genericTokens": [
      {
        "constraints": {
          "type": "any",
        },
        "default": {
          "type": "unknown",
        },
        "symbol": "ValueType",
      },
      {
        "constraints": {
          "type": "string",
        },
        "default": {
          "type": "string",
        },
        "symbol": "Key",
      },
    ],
    "name": "Template",
    "properties": {
      "data": {
        "node": {
          "description": "A pointer to the data-model containing an array of elements to map over",
          "ref": "Binding",
          "title": "Template.data",
          "type": "ref",
        },
        "required": true,
      },
      "dynamic": {
        "node": {
          "description": "should the template be recomputed when data changes",
          "title": "Template.dynamic",
          "type": "boolean",
        },
        "required": false,
      },
      "output": {
        "node": {
          "description": "A property on the parent object to store the new map under.
If it already exists, values are appended to the end.",
          "ref": "Key",
          "title": "Template.output",
          "type": "ref",
        },
        "required": true,
      },
      "value": {
        "node": {
          "description": "The template to iterate over using each value in the supplied template data.
Any reference to _index_ is replaced with the current iteration index.",
          "ref": "ValueType",
          "title": "Template.value",
          "type": "ref",
        },
        "required": true,
      },
    },
    "source": "filename.ts",
    "title": "Template",
    "type": "object",
  },
  {
    "check": {
      "left": {
        "type": "unknown",
      },
      "right": {
        "property": "validation",
        "ref": "Asset",
        "type": "ref",
      },
    },
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "View",
    "source": "filename.ts",
    "title": "View",
    "type": "conditional",
    "value": {
      "false": {
        "ref": "T",
        "type": "ref",
      },
      "true": {
        "and": [
          {
            "ref": "T",
            "type": "ref",
          },
          {
            "additionalProperties": false,
            "properties": {
              "validation": {
                "node": {
                  "description": "Each view can optionally supply a list of validations to run against a particular view",
                  "elementType": {
                    "additionalProperties": {
                      "type": "unknown",
                    },
                    "genericTokens": undefined,
                    "name": "CrossfieldReference",
                    "properties": {
                      "dataTarget": {
                        "node": {
                          "description": "Cross-field references and validation must run against the default (deformatted) value",
                          "title": "CrossfieldReference.dataTarget",
                          "type": "never",
                        },
                        "required": false,
                      },
                      "displayTarget": {
                        "node": {
                          "description": "Where the error should be displayed",
                          "genericTokens": undefined,
                          "name": "DisplayTarget",
                          "or": [
                            {
                              "const": "page",
                              "type": "string",
                            },
                            {
                              "const": "section",
                              "type": "string",
                            },
                            {
                              "const": "field",
                              "type": "string",
                            },
                          ],
                          "source": undefined,
                          "title": "Reference.displayTarget",
                          "type": "or",
                        },
                        "required": false,
                      },
                      "message": {
                        "node": {
                          "description": "An optional means of overriding the default message if the validation is triggered",
                          "title": "Reference.message",
                          "type": "string",
                        },
                        "required": false,
                      },
                      "ref": {
                        "node": {
                          "description": "The binding to associate this validation with",
                          "genericArguments": undefined,
                          "ref": "Binding",
                          "title": "CrossfieldReference.ref",
                          "type": "ref",
                        },
                        "required": false,
                      },
                      "severity": {
                        "node": {
                          "description": "An optional means of overriding the default severity of the validation if triggered",
                          "genericTokens": undefined,
                          "name": "Severity",
                          "or": [
                            {
                              "const": "error",
                              "type": "string",
                            },
                            {
                              "const": "warning",
                              "type": "string",
                            },
                          ],
                          "source": undefined,
                          "title": "Reference.severity",
                          "type": "or",
                        },
                        "required": false,
                      },
                      "trigger": {
                        "node": {
                          "description": "When to run this particular validation",
                          "genericTokens": undefined,
                          "name": "Trigger",
                          "or": [
                            {
                              "const": "navigation",
                              "type": "string",
                            },
                            {
                              "const": "change",
                              "type": "string",
                            },
                            {
                              "const": "load",
                              "type": "string",
                            },
                          ],
                          "source": undefined,
                          "title": "Reference.trigger",
                          "type": "or",
                        },
                        "required": false,
                      },
                      "type": {
                        "node": {
                          "description": "The name of the referenced validation type
This will be used to lookup the proper handler",
                          "title": "Reference.type",
                          "type": "string",
                        },
                        "required": true,
                      },
                    },
                    "source": undefined,
                    "title": "CrossfieldReference",
                    "type": "object",
                  },
                  "title": "validation",
                  "type": "array",
                },
                "required": false,
              },
            },
            "type": "object",
          },
        ],
        "type": "and",
      },
    },
  },
  {
    "additionalProperties": {
      "type": "unknown",
    },
    "description": "The JSON payload for running Player",
    "genericTokens": [
      {
        "constraints": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "default": {
          "genericArguments": undefined,
          "ref": "Asset",
          "type": "ref",
        },
        "symbol": "T",
      },
    ],
    "name": "Flow",
    "properties": {
      "data": {
        "node": {
          "description": "Any initial data that the flow can use",
          "genericTokens": undefined,
          "keyType": {
            "type": "any",
          },
          "name": "DataModel",
          "source": "filename.ts",
          "title": "Flow.data",
          "type": "record",
          "valueType": {
            "type": "unknown",
          },
        },
        "required": false,
      },
      "id": {
        "node": {
          "description": "A unique identifier for the flow",
          "title": "Flow.id",
          "type": "string",
        },
        "required": true,
      },
      "navigation": {
        "node": {
          "and": [
            {
              "additionalProperties": false,
              "properties": {
                "BEGIN": {
                  "node": {
                    "description": "The name of the Flow to begin on",
                    "title": "BEGIN",
                    "type": "string",
                  },
                  "required": true,
                },
              },
              "type": "object",
            },
            {
              "keyType": {
                "type": "string",
              },
              "type": "record",
              "valueType": {
                "or": [
                  {
                    "type": "string",
                  },
                  {
                    "additionalProperties": {
                      "or": [
                        {
                          "type": "undefined",
                        },
                        {
                          "type": "string",
                        },
                        {
                          "ref": "Expression",
                          "type": "ref",
                        },
                        {
                          "additionalProperties": false,
                          "description": "An object with an expression in it",
                          "name": "ExpressionObject",
                          "properties": {
                            "exp": {
                              "node": {
                                "description": "The expression to run",
                                "ref": "Expression",
                                "title": "ExpressionObject.exp",
                                "type": "ref",
                              },
                              "required": false,
                            },
                          },
                          "source": "filename.ts",
                          "title": "ExpressionObject",
                          "type": "object",
                        },
                        {
                          "name": "NavigationFlowState",
                          "or": [
                            {
                              "additionalProperties": false,
                              "description": "A state representing a view",
                              "name": "NavigationFlowViewState",
                              "properties": {
                                "_comment": {
                                  "node": {
                                    "description": "Add comments that will not be processing, but are useful for code explanation",
                                    "title": "CommentBase._comment",
                                    "type": "string",
                                  },
                                  "required": false,
                                },
                                "attributes": {
                                  "node": {
                                    "additionalProperties": {
                                      "type": "any",
                                    },
                                    "description": "View meta-properties",
                                    "properties": {},
                                    "title": "NavigationFlowViewState.attributes",
                                    "type": "object",
                                  },
                                  "required": false,
                                },
                                "exp": {
                                  "node": {
                                    "title": "NavigationBaseState.exp",
                                    "type": "never",
                                  },
                                  "required": false,
                                },
                                "onEnd": {
                                  "node": {
                                    "description": "An optional expression to run before view transition",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onEnd",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onEnd",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "onStart": {
                                  "node": {
                                    "description": "An optional expression to run when this view renders",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onStart",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onStart",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "ref": {
                                  "node": {
                                    "description": "An id corresponding to a view from the "views" array",
                                    "title": "NavigationFlowViewState.ref",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "state_type": {
                                  "node": {
                                    "const": "VIEW",
                                    "description": "A property to determine the type of state this is",
                                    "title": "NavigationBaseState.state_type",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "transitions": {
                                  "node": {
                                    "description": "A mapping of transition-name to FlowState name",
                                    "keyType": {
                                      "type": "string",
                                    },
                                    "name": "NavigationFlowTransition",
                                    "source": "filename.ts",
                                    "title": "NavigationFlowTransitionableState.transitions",
                                    "type": "record",
                                    "valueType": {
                                      "type": "string",
                                    },
                                  },
                                  "required": true,
                                },
                              },
                              "source": "filename.ts",
                              "title": "NavigationFlowViewState",
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "description": "An END state of the flow.",
                              "name": "NavigationFlowEndState",
                              "properties": {
                                "_comment": {
                                  "node": {
                                    "description": "Add comments that will not be processing, but are useful for code explanation",
                                    "title": "CommentBase._comment",
                                    "type": "string",
                                  },
                                  "required": false,
                                },
                                "exp": {
                                  "node": {
                                    "title": "NavigationBaseState.exp",
                                    "type": "never",
                                  },
                                  "required": false,
                                },
                                "onEnd": {
                                  "node": {
                                    "description": "An optional expression to run before view transition",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onEnd",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onEnd",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "onStart": {
                                  "node": {
                                    "description": "An optional expression to run when this view renders",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onStart",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onStart",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "outcome": {
                                  "node": {
                                    "description": "A description of _how_ the flow ended.
If this is a flow started from another flow, the outcome determines the flow transition",
                                    "title": "NavigationFlowEndState.outcome",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "state_type": {
                                  "node": {
                                    "const": "END",
                                    "description": "A property to determine the type of state this is",
                                    "title": "NavigationBaseState.state_type",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                              },
                              "source": "filename.ts",
                              "title": "NavigationFlowEndState",
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "name": "NavigationFlowFlowState",
                              "properties": {
                                "_comment": {
                                  "node": {
                                    "description": "Add comments that will not be processing, but are useful for code explanation",
                                    "title": "CommentBase._comment",
                                    "type": "string",
                                  },
                                  "required": false,
                                },
                                "exp": {
                                  "node": {
                                    "title": "NavigationBaseState.exp",
                                    "type": "never",
                                  },
                                  "required": false,
                                },
                                "onEnd": {
                                  "node": {
                                    "description": "An optional expression to run before view transition",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onEnd",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onEnd",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "onStart": {
                                  "node": {
                                    "description": "An optional expression to run when this view renders",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onStart",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onStart",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "ref": {
                                  "node": {
                                    "description": "A reference to a FLOW id state to run",
                                    "title": "NavigationFlowFlowState.ref",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "state_type": {
                                  "node": {
                                    "const": "FLOW",
                                    "description": "A property to determine the type of state this is",
                                    "title": "NavigationBaseState.state_type",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "transitions": {
                                  "node": {
                                    "description": "A mapping of transition-name to FlowState name",
                                    "keyType": {
                                      "type": "string",
                                    },
                                    "name": "NavigationFlowTransition",
                                    "source": "filename.ts",
                                    "title": "NavigationFlowTransitionableState.transitions",
                                    "type": "record",
                                    "valueType": {
                                      "type": "string",
                                    },
                                  },
                                  "required": true,
                                },
                              },
                              "source": "filename.ts",
                              "title": "NavigationFlowFlowState",
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "description": "Action states execute an expression to determine the next state to transition to",
                              "name": "NavigationFlowActionState",
                              "properties": {
                                "_comment": {
                                  "node": {
                                    "description": "Add comments that will not be processing, but are useful for code explanation",
                                    "title": "CommentBase._comment",
                                    "type": "string",
                                  },
                                  "required": false,
                                },
                                "exp": {
                                  "node": {
                                    "description": "An expression to execute.
The return value determines the transition to take",
                                    "ref": "Expression",
                                    "title": "NavigationFlowActionState.exp",
                                    "type": "ref",
                                  },
                                  "required": true,
                                },
                                "onEnd": {
                                  "node": {
                                    "description": "An optional expression to run before view transition",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onEnd",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onEnd",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "onStart": {
                                  "node": {
                                    "description": "An optional expression to run when this view renders",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onStart",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onStart",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "state_type": {
                                  "node": {
                                    "const": "ACTION",
                                    "description": "A property to determine the type of state this is",
                                    "title": "NavigationBaseState.state_type",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "transitions": {
                                  "node": {
                                    "description": "A mapping of transition-name to FlowState name",
                                    "keyType": {
                                      "type": "string",
                                    },
                                    "name": "NavigationFlowTransition",
                                    "source": "filename.ts",
                                    "title": "NavigationFlowTransitionableState.transitions",
                                    "type": "record",
                                    "valueType": {
                                      "type": "string",
                                    },
                                  },
                                  "required": true,
                                },
                              },
                              "source": "filename.ts",
                              "title": "NavigationFlowActionState",
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "description": "External Flow states represent states in the FSM that can't be resolved internally in Player.
The flow will wait for the embedded application to manage moving to the next state via a transition",
                              "name": "NavigationFlowExternalState",
                              "properties": {
                                "_comment": {
                                  "node": {
                                    "description": "Add comments that will not be processing, but are useful for code explanation",
                                    "title": "CommentBase._comment",
                                    "type": "string",
                                  },
                                  "required": false,
                                },
                                "exp": {
                                  "node": {
                                    "title": "NavigationBaseState.exp",
                                    "type": "never",
                                  },
                                  "required": false,
                                },
                                "onEnd": {
                                  "node": {
                                    "description": "An optional expression to run before view transition",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onEnd",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onEnd",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "onStart": {
                                  "node": {
                                    "description": "An optional expression to run when this view renders",
                                    "or": [
                                      {
                                        "ref": "Expression",
                                        "title": "NavigationBaseState.onStart",
                                        "type": "ref",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "description": "An object with an expression in it",
                                        "name": "ExpressionObject",
                                        "properties": {
                                          "exp": {
                                            "node": {
                                              "description": "The expression to run",
                                              "ref": "Expression",
                                              "title": "ExpressionObject.exp",
                                              "type": "ref",
                                            },
                                            "required": false,
                                          },
                                        },
                                        "source": "filename.ts",
                                        "title": "ExpressionObject",
                                        "type": "object",
                                      },
                                    ],
                                    "title": "NavigationBaseState.onStart",
                                    "type": "or",
                                  },
                                  "required": false,
                                },
                                "ref": {
                                  "node": {
                                    "description": "A reference for this external state",
                                    "title": "NavigationFlowExternalState.ref",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "state_type": {
                                  "node": {
                                    "const": "EXTERNAL",
                                    "description": "A property to determine the type of state this is",
                                    "title": "NavigationBaseState.state_type",
                                    "type": "string",
                                  },
                                  "required": true,
                                },
                                "transitions": {
                                  "node": {
                                    "description": "A mapping of transition-name to FlowState name",
                                    "keyType": {
                                      "type": "string",
                                    },
                                    "name": "NavigationFlowTransition",
                                    "source": "filename.ts",
                                    "title": "NavigationFlowTransitionableState.transitions",
                                    "type": "record",
                                    "valueType": {
                                      "type": "string",
                                    },
                                  },
                                  "required": true,
                                },
                              },
                              "source": "filename.ts",
                              "title": "NavigationFlowExternalState",
                              "type": "object",
                            },
                          ],
                          "source": "filename.ts",
                          "title": "NavigationFlowState",
                          "type": "or",
                        },
                      ],
                      "type": "or",
                    },
                    "description": "A state machine in the navigation",
                    "name": "NavigationFlow",
                    "properties": {
                      "onEnd": {
                        "node": {
                          "description": "An optional expression to run when this Flow ends",
                          "or": [
                            {
                              "ref": "Expression",
                              "title": "NavigationFlow.onEnd",
                              "type": "ref",
                            },
                            {
                              "additionalProperties": false,
                              "description": "An object with an expression in it",
                              "name": "ExpressionObject",
                              "properties": {
                                "exp": {
                                  "node": {
                                    "description": "The expression to run",
                                    "ref": "Expression",
                                    "title": "ExpressionObject.exp",
                                    "type": "ref",
                                  },
                                  "required": false,
                                },
                              },
                              "source": "filename.ts",
                              "title": "ExpressionObject",
                              "type": "object",
                            },
                          ],
                          "title": "NavigationFlow.onEnd",
                          "type": "or",
                        },
                        "required": false,
                      },
                      "onStart": {
                        "node": {
                          "description": "An optional expression to run when this Flow starts",
                          "or": [
                            {
                              "ref": "Expression",
                              "title": "NavigationFlow.onStart",
                              "type": "ref",
                            },
                            {
                              "additionalProperties": false,
                              "description": "An object with an expression in it",
                              "name": "ExpressionObject",
                              "properties": {
                                "exp": {
                                  "node": {
                                    "description": "The expression to run",
                                    "ref": "Expression",
                                    "title": "ExpressionObject.exp",
                                    "type": "ref",
                                  },
                                  "required": false,
                                },
                              },
                              "source": "filename.ts",
                              "title": "ExpressionObject",
                              "type": "object",
                            },
                          ],
                          "title": "NavigationFlow.onStart",
                          "type": "or",
                        },
                        "required": false,
                      },
                      "startState": {
                        "node": {
                          "description": "The first state to kick off the state machine",
                          "title": "NavigationFlow.startState",
                          "type": "string",
                        },
                        "required": true,
                      },
                    },
                    "source": "filename.ts",
                    "title": "NavigationFlow",
                    "type": "object",
                  },
                ],
                "type": "or",
              },
            },
          ],
          "description": "A state machine to drive a user through the experience",
          "genericTokens": undefined,
          "name": "Navigation",
          "source": "filename.ts",
          "title": "Flow.navigation",
          "type": "and",
        },
        "required": true,
      },
      "schema": {
        "node": {
          "additionalProperties": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "unknown",
              },
              "description": "Each prop in the object can have a specific DataType",
              "genericTokens": [
                {
                  "constraints": {
                    "type": "any",
                  },
                  "default": {
                    "type": "unknown",
                  },
                  "symbol": "T",
                },
              ],
              "name": "DataType",
              "properties": {
                "default": {
                  "node": {
                    "description": "A default value for this property.
Any reads for this property will result in this default value being written to the model.",
                    "ref": "T",
                    "title": "DataType.default",
                    "type": "ref",
                  },
                  "required": false,
                },
                "format": {
                  "node": {
                    "additionalProperties": {
                      "type": "unknown",
                    },
                    "description": "A reference to a specific data format to use.
If none is specified, will fallback to that of the base type",
                    "name": "Reference",
                    "properties": {
                      "type": {
                        "node": {
                          "description": "The name of the formatter (and de-formatter) to use",
                          "title": "Reference.type",
                          "type": "string",
                        },
                        "required": true,
                      },
                    },
                    "title": "DataType.format",
                    "type": "object",
                  },
                  "required": false,
                },
                "isArray": {
                  "node": {
                    "description": "The referenced object represents an array rather than an object",
                    "title": "DataType.isArray",
                    "type": "boolean",
                  },
                  "required": false,
                },
                "type": {
                  "node": {
                    "description": "The reference of the base type to use",
                    "title": "DataType.type",
                    "type": "string",
                  },
                  "required": true,
                },
                "validation": {
                  "node": {
                    "description": "Any additional validations that are associated with this property
These will add to any base validations associated with the "type"",
                    "elementType": {
                      "additionalProperties": {
                        "type": "unknown",
                      },
                      "description": "A reference to a validation object",
                      "name": "Reference",
                      "properties": {
                        "dataTarget": {
                          "node": {
                            "description": "Each validation is passed the value of the data to run it's validation against.
By default, this is the value stored in the data-model (deformatted).
In the off chance you'd like this validator to run against the formatted value (the one the user sees), set this option",
                            "or": [
                              {
                                "const": "formatted",
                                "type": "string",
                              },
                              {
                                "const": "deformatted",
                                "type": "string",
                              },
                            ],
                            "title": "Reference.dataTarget",
                            "type": "or",
                          },
                          "required": false,
                        },
                        "displayTarget": {
                          "node": {
                            "description": "Where the error should be displayed",
                            "name": "DisplayTarget",
                            "or": [
                              {
                                "const": "page",
                                "type": "string",
                              },
                              {
                                "const": "section",
                                "type": "string",
                              },
                              {
                                "const": "field",
                                "type": "string",
                              },
                            ],
                            "title": "Reference.displayTarget",
                            "type": "or",
                          },
                          "required": false,
                        },
                        "message": {
                          "node": {
                            "description": "An optional means of overriding the default message if the validation is triggered",
                            "title": "Reference.message",
                            "type": "string",
                          },
                          "required": false,
                        },
                        "severity": {
                          "node": {
                            "description": "An optional means of overriding the default severity of the validation if triggered",
                            "name": "Severity",
                            "or": [
                              {
                                "const": "error",
                                "type": "string",
                              },
                              {
                                "const": "warning",
                                "type": "string",
                              },
                            ],
                            "title": "Reference.severity",
                            "type": "or",
                          },
                          "required": false,
                        },
                        "trigger": {
                          "node": {
                            "description": "When to run this particular validation",
                            "name": "Trigger",
                            "or": [
                              {
                                "const": "navigation",
                                "type": "string",
                              },
                              {
                                "const": "change",
                                "type": "string",
                              },
                              {
                                "const": "load",
                                "type": "string",
                              },
                            ],
                            "title": "Reference.trigger",
                            "type": "or",
                          },
                          "required": false,
                        },
                        "type": {
                          "node": {
                            "description": "The name of the referenced validation type
This will be used to lookup the proper handler",
                            "title": "Reference.type",
                            "type": "string",
                          },
                          "required": true,
                        },
                      },
                      "title": "Reference",
                      "type": "object",
                    },
                    "title": "DataType.validation",
                    "type": "array",
                  },
                  "required": false,
                },
              },
              "title": "DataType",
              "type": "object",
            },
            "description": "A Node describes a specific object in the tree",
            "genericTokens": undefined,
            "name": "Node",
            "properties": {},
            "source": undefined,
            "title": "Node",
            "type": "object",
          },
          "description": "The schema for the supplied (or referenced data).
This is used for validation, formatting, etc",
          "genericTokens": undefined,
          "name": "Schema",
          "properties": {
            "ROOT": {
              "node": {
                "additionalProperties": {
                  "additionalProperties": {
                    "type": "unknown",
                  },
                  "description": "Each prop in the object can have a specific DataType",
                  "genericTokens": [
                    {
                      "constraints": {
                        "type": "any",
                      },
                      "default": {
                        "type": "unknown",
                      },
                      "symbol": "T",
                    },
                  ],
                  "name": "DataType",
                  "properties": {
                    "default": {
                      "node": {
                        "description": "A default value for this property.
Any reads for this property will result in this default value being written to the model.",
                        "ref": "T",
                        "title": "DataType.default",
                        "type": "ref",
                      },
                      "required": false,
                    },
                    "format": {
                      "node": {
                        "additionalProperties": {
                          "type": "unknown",
                        },
                        "description": "A reference to a specific data format to use.
If none is specified, will fallback to that of the base type",
                        "genericTokens": undefined,
                        "name": "Reference",
                        "properties": {
                          "type": {
                            "node": {
                              "description": "The name of the formatter (and de-formatter) to use",
                              "title": "Reference.type",
                              "type": "string",
                            },
                            "required": true,
                          },
                        },
                        "source": undefined,
                        "title": "DataType.format",
                        "type": "object",
                      },
                      "required": false,
                    },
                    "isArray": {
                      "node": {
                        "description": "The referenced object represents an array rather than an object",
                        "title": "DataType.isArray",
                        "type": "boolean",
                      },
                      "required": false,
                    },
                    "type": {
                      "node": {
                        "description": "The reference of the base type to use",
                        "title": "DataType.type",
                        "type": "string",
                      },
                      "required": true,
                    },
                    "validation": {
                      "node": {
                        "description": "Any additional validations that are associated with this property
These will add to any base validations associated with the "type"",
                        "elementType": {
                          "additionalProperties": {
                            "type": "unknown",
                          },
                          "description": "A reference to a validation object",
                          "genericTokens": undefined,
                          "name": "Reference",
                          "properties": {
                            "dataTarget": {
                              "node": {
                                "description": "Each validation is passed the value of the data to run it's validation against.
By default, this is the value stored in the data-model (deformatted).
In the off chance you'd like this validator to run against the formatted value (the one the user sees), set this option",
                                "or": [
                                  {
                                    "const": "formatted",
                                    "type": "string",
                                  },
                                  {
                                    "const": "deformatted",
                                    "type": "string",
                                  },
                                ],
                                "title": "Reference.dataTarget",
                                "type": "or",
                              },
                              "required": false,
                            },
                            "displayTarget": {
                              "node": {
                                "description": "Where the error should be displayed",
                                "name": "DisplayTarget",
                                "or": [
                                  {
                                    "const": "page",
                                    "type": "string",
                                  },
                                  {
                                    "const": "section",
                                    "type": "string",
                                  },
                                  {
                                    "const": "field",
                                    "type": "string",
                                  },
                                ],
                                "title": "Reference.displayTarget",
                                "type": "or",
                              },
                              "required": false,
                            },
                            "message": {
                              "node": {
                                "description": "An optional means of overriding the default message if the validation is triggered",
                                "title": "Reference.message",
                                "type": "string",
                              },
                              "required": false,
                            },
                            "severity": {
                              "node": {
                                "description": "An optional means of overriding the default severity of the validation if triggered",
                                "name": "Severity",
                                "or": [
                                  {
                                    "const": "error",
                                    "type": "string",
                                  },
                                  {
                                    "const": "warning",
                                    "type": "string",
                                  },
                                ],
                                "title": "Reference.severity",
                                "type": "or",
                              },
                              "required": false,
                            },
                            "trigger": {
                              "node": {
                                "description": "When to run this particular validation",
                                "name": "Trigger",
                                "or": [
                                  {
                                    "const": "navigation",
                                    "type": "string",
                                  },
                                  {
                                    "const": "change",
                                    "type": "string",
                                  },
                                  {
                                    "const": "load",
                                    "type": "string",
                                  },
                                ],
                                "title": "Reference.trigger",
                                "type": "or",
                              },
                              "required": false,
                            },
                            "type": {
                              "node": {
                                "description": "The name of the referenced validation type
This will be used to lookup the proper handler",
                                "title": "Reference.type",
                                "type": "string",
                              },
                              "required": true,
                            },
                          },
                          "source": undefined,
                          "title": "Reference",
                          "type": "object",
                        },
                        "title": "DataType.validation",
                        "type": "array",
                      },
                      "required": false,
                    },
                  },
                  "source": undefined,
                  "title": "DataType",
                  "type": "object",
                },
                "description": "The ROOT object is the top level object to use",
                "genericTokens": undefined,
                "name": "Node",
                "properties": {},
                "source": undefined,
                "title": "Schema.ROOT",
                "type": "object",
              },
              "required": true,
            },
          },
          "source": undefined,
          "title": "Flow.schema",
          "type": "object",
        },
        "required": false,
      },
      "views": {
        "node": {
          "description": "A list of views (each with an ID) that can be shown to a user",
          "elementType": {
            "check": {
              "left": {
                "type": "unknown",
              },
              "right": {
                "property": "validation",
                "ref": "Asset",
                "type": "ref",
              },
            },
            "genericTokens": [
              {
                "constraints": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "default": {
                  "ref": "Asset",
                  "type": "ref",
                },
                "symbol": "T",
              },
            ],
            "name": "View",
            "source": "filename.ts",
            "title": "View",
            "type": "conditional",
            "value": {
              "false": {
                "ref": "T",
                "type": "ref",
              },
              "true": {
                "and": [
                  {
                    "ref": "T",
                    "type": "ref",
                  },
                  {
                    "additionalProperties": false,
                    "extends": undefined,
                    "properties": {
                      "validation": {
                        "node": {
                          "description": "Each view can optionally supply a list of validations to run against a particular view",
                          "elementType": {
                            "additionalProperties": {
                              "type": "unknown",
                            },
                            "extends": undefined,
                            "name": "CrossfieldReference",
                            "properties": {
                              "dataTarget": {
                                "node": {
                                  "description": "Cross-field references and validation must run against the default (deformatted) value",
                                  "title": "CrossfieldReference.dataTarget",
                                  "type": "never",
                                },
                                "required": false,
                              },
                              "displayTarget": {
                                "node": {
                                  "description": "Where the error should be displayed",
                                  "name": "DisplayTarget",
                                  "or": [
                                    {
                                      "const": "page",
                                      "type": "string",
                                    },
                                    {
                                      "const": "section",
                                      "type": "string",
                                    },
                                    {
                                      "const": "field",
                                      "type": "string",
                                    },
                                  ],
                                  "title": "Reference.displayTarget",
                                  "type": "or",
                                },
                                "required": false,
                              },
                              "message": {
                                "node": {
                                  "description": "An optional means of overriding the default message if the validation is triggered",
                                  "title": "Reference.message",
                                  "type": "string",
                                },
                                "required": false,
                              },
                              "ref": {
                                "node": {
                                  "description": "The binding to associate this validation with",
                                  "ref": "Binding",
                                  "title": "CrossfieldReference.ref",
                                  "type": "ref",
                                },
                                "required": false,
                              },
                              "severity": {
                                "node": {
                                  "description": "An optional means of overriding the default severity of the validation if triggered",
                                  "name": "Severity",
                                  "or": [
                                    {
                                      "const": "error",
                                      "type": "string",
                                    },
                                    {
                                      "const": "warning",
                                      "type": "string",
                                    },
                                  ],
                                  "title": "Reference.severity",
                                  "type": "or",
                                },
                                "required": false,
                              },
                              "trigger": {
                                "node": {
                                  "description": "When to run this particular validation",
                                  "name": "Trigger",
                                  "or": [
                                    {
                                      "const": "navigation",
                                      "type": "string",
                                    },
                                    {
                                      "const": "change",
                                      "type": "string",
                                    },
                                    {
                                      "const": "load",
                                      "type": "string",
                                    },
                                  ],
                                  "title": "Reference.trigger",
                                  "type": "or",
                                },
                                "required": false,
                              },
                              "type": {
                                "node": {
                                  "description": "The name of the referenced validation type
This will be used to lookup the proper handler",
                                  "title": "Reference.type",
                                  "type": "string",
                                },
                                "required": true,
                              },
                            },
                            "title": "CrossfieldReference",
                            "type": "object",
                          },
                          "title": "validation",
                          "type": "array",
                        },
                        "required": false,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "and",
              },
            },
          },
          "title": "Flow.views",
          "type": "array",
        },
        "required": false,
      },
    },
    "source": "filename.ts",
    "title": "Flow",
    "type": "object",
  },
]
`;
